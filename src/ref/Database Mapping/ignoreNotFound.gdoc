h1. ignoreNotFound

h2. Purpose

Specifies how foreign keys that reference missing rows will be handled in many-to-one relation. @true@ will treat a missing row as a @null@ association and load operation of such a missing reference will not break the process. @false@ will throw @org.hibernate.ObjectNotFoundException@ and is the default setting. @ignoreNotFound@ is a mapping to Hibernate @not-found@ property.

It will be useful if you are in front of a legacy database with some fancy understanding of referential integrity. To get it behave properly with Grails you may use this property.

h2. Example

{code:java}
class LegacyCdDomain {
    String title
    Thumbnail thumbnail
}

class Thumbnail {
    byte[] data
}
{code}

If from the database end, @LegacyCdDomain@ says it has @thumbnail@ with @thumbnail@'s @id@, but actually that @thumbnail@'s @id@ doesn't exist in @Thumbnail@ table, then it (Hibernate) will complain: @No row with the given identifier exists@.

A possible way to load such corrupt data is to use @ignoreNotFound@ set @true@ in @LegacyCdDomain@ as follows:

{code:java}
class LegacyCdDomain {
    String title
    Thumbnail thumbnail
    ...
    static mapping = {
        thumbnail ignoreNotFound: true
    }
}
{code}

h2. Description

Usage: @association_name(ignoreNotFound: boolean)@

Default value is set to @false@, missing references will throw @org.hibernate.ObjectNotFoundException@.

{warning}
A dataset loaded with @ignoreNotFound: true@ may throw an exception during @save()@ because of the missing reference!
{warning}


