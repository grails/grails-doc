{hidden}
h1. allowedMethods

h2. Purpose

Limits access to controller actions based on the HTTP request method, sending a 405 (Method Not Allowed) error code when an incorrect HTTP method is used.

h2. Examples

{code}
class PersonController {
    // action1 may be invoked from a POST
    // action2 has no restrictions
    // action3 may be invoked from a POST or DELETE
    static allowedMethods = \[action1:'POST',
                             action3:\['POST', 'DELETE'\]\]
    def action1() { ... }
    def action2() { ... }
    def action3() { ... }
}
{code}

h2. Description

The @allowedMethods@ property provides a simple declarative syntax to specify which HTTP methods are allowed for your controller actions. By default, all request methods are allowed for all controller actions. The @allowedMethods@ property is optional and only needs to be defined if the controller has actions to be restricted to certain request methods.

You can do these checks programmatically in the controller actions and send a 405 error code yourself, but this tends to clutter the controller methods which should focus more on application logic and routing. This approach might not be sufficient in more complex scenarios, and in those cases it's fine to handle things yourself.

The @allowedMethods@ property is a Map, where the keys are the names of actions to be restricted and the values are either a @String@ or a @List@ of @String@s. If the value is a @String@, it represents the only request method that may be used to invoke that action. If it is a @List@ of @String@s the @List@ it represents all of the request methods that may be used to invoke that action. If the specified restrictions are violated then a 405 error code is returned in the response.

For example this code prevents the @delete@ action from being invoked using an HTTP GET:

{code}
class PersonController {
    def delete() {
        if (request.method == 'GET') {
            // redirect to the list action
            redirect(action: list)
        } else {
            // the rest of the delete action goes here
        }
    }
}
{code}

It could instead return a 405 error code rather than redirecting:

{code}
class PersonController {
    def delete() {
        if (request.method == 'GET') {
            response.sendError(405)
        } else {
            // the rest of the delete action goes here
        }
    }
}
{code}

But the cleanest solution is to use @allowedMethods@:

{code}
class PersonController {

    static allowedMethods = \[save: "POST", update: "POST", delete: "POST"\]

    def delete() {
        // the delete logic goes here
    }
}
{code}
{hidden}

h1. allowedMethods

h2. Propósito

Limita o acesso às ações do controller baseado no método HTTP requisitado, enviando um código de erro 405 (Method Not Allowed) quando um método HTTP incorreto é utilizado.

h2. Exemplos

{code}
class PersonController {
    // action1 pode ser chamada por um POST
    // action2 não aprensenta restrições 
    // action3 pode ser chamada por um POST ou DELETE 
    static allowedMethods = \[action1:'POST',
                             action3:\['POST', 'DELETE'\]\]
    def action1() { ... }
    def action2() { ... }
    def action3() { ... }
}
{code}

h2. Descrição

A propriedade @allowedMethods@ fornece uma sintaxe declarativa simples para especificar quais métodos HTTP são permitidos para suas ações no controller. Por padrão, todos os métodos requisitados são permitidos para todas as ações no controller. A propriedade @allowedMethods@ é opcional e só precisa ser definida se o controller tiver ações que devem ser restritas para certos métodos requisitados.

Você pode fazer essas checagens programaticamente no controller e enviar um erro 405 quando desejar, porem isso tende a desordenar os métodos do controller que são mais focados em roteamento e lógica de aplicações. Essa abordagem pode não ser suficientemente complexa em alguns cenários, e nesses casos é normal cuidar das coisas por si só.

A propriedade @allowedMethods@ é um Map, onde as chaves são os nomes das ações que serão restringidas e os valores são ou uma @String@ ou uma @List@ de @String@s. Se o valor for uma @String@, isso representa o único método requisitado que pode ser usado para chamar aquela ação. Se for uma @List@ de @String@s, a @List@ representa todos os métodos requisitados que podem ser usados para chamar aquela ação. Se a restrição especifica for violada, então um erro 405 é retornado como resposta.


Para exemplificar, esse código previne a ação @delete@ de ser chamada usando um HTTP GET:

{code}
class PersonController {
    def delete() {
        if (request.method == 'GET') {
            // redireciona para a lista action
            redirect(action: list)
        } else {
            // o resto da ação delete vem aqui
        }
    }
}
{code}

Poderia tambem retornar um erro 405 ao invés de redirecionar:

{code}
class PersonController {
    def delete() {
        if (request.method == 'GET') {
            response.sendError(405)
        } else {
            // o resto da ação delete vem aqui
        }
    }
}
{code}

Mas a solução mais limpa é usando o @allowedMethods@:

{code}
class PersonController {

    static allowedMethods = \[save: "POST", update: "POST", delete: "POST"\]

    def delete() {
        // o resto da ação delete vem aqui
    }
}
{code}
