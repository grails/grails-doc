h3. Default Declarative Transactions

Services are typically involved with co-ordinating logic between [domain classes|guide:GORM], and hence often involved with persistence that spans large operations. Given the nature of services they frequently require transactional behaviour. You can of course use programmatic transactions with the [withTransaction|domainClasses] method, however this is repetitive and doesn't fully leverage the power of Spring's underlying transaction abstraction.

Services allow the enablement of transaction demarcation, which is essentially a declarative way of saying all methods within this service are to be made transactional. All services have transaction demarcation enabled by default - to disable it, simply set the @transactional@ property to @false@:

{code:java}
class CountryService {
    static transactional = false
}
{code}

You may also set this property to @true@ in case the default changes in the future, or simply to make it clear that the service is intentionally transactional.

{warning}
Warning: [dependency injection|guide:8.3 Dependency Injection and Services] is the *only* way that declarative transactions work. You will not get a transactional service if you use the @new@ operator such as @new BookService()@
{warning}


The result is that all methods are wrapped in a transaction and automatic rollback occurs if any of those methods throws a runtime exception, i.e. one that extends @RuntimeException@. The propagation level of the transaction is by default set to [PROPAGATION_REQUIRED|http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/transaction/TransactionDefinition.html#PROPAGATION_REQUIRED].

{warning}
Checked exceptions do *not* have any effect on the transaction, i.e. the transaction is not automatically rolled back. This is the default Spring behaviour and it's important to understand the distinction between checked and unchecked (runtime) exceptions.
{warning}

h3. Custom Transaction Configuration

Grails also fully supports Spring's @Transactional@ annotation for cases where you need more fine-grained control over transactions at a per-method level or need specify an alternative propagation level:

{code}
import org.springframework.transaction.annotation.*

class BookService {

    @Transactional(readOnly = true)
    def listBooks() { Book.list() }

    @Transactional def updateBook() {
        // â€¦
    }
}
{code}

For more information refer to the section of the Spring user guide on [Using @Transactional|http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/transaction.html#transaction-declarative-annotations].

{note}
Unlike Spring you do not need any prior configuration to use @Transactional@, just specify the annotation as needed and Grails will pick them up automatically.
{note}

{warning}
Annotating a service method with @Transactional@ disables the default Grails transactional behavior for that service and all other transactional methods need to be annotated as well.
{warning}
