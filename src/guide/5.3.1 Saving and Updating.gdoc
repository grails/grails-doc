An example of using the [save|domainClasses] method can be seen below:

{code}
def p = Person.get(1)
p.save()
{code}

A major difference with Hibernate is when you call [save|domainClasses] it does not necessarily perform any SQL operations *at that point*. Hibernate typically batches up SQL statements and executes them at the end. This is typically done for you automatically by Grails, which manages your Hibernate session.

There are occasions, however, when you may want to control when those statements are executed or, in Hibernate terminology, when the session is "flushed". To do so you can use the flush argument to the save method:

{code}
def p = Person.get(1)
p.save(flush:true)
{code}

Note that in this case all pending SQL statements including previous saves will be synchronized with the db. This also allows you to catch any exceptions thrown, which is typically useful in highly concurrent scenarios involving [optimistic locking|guide:5.3.5 Pessimistic and Optimistic Locking]:

{code}
def p = Person.get(1)
try {
    p.save(flush:true)
}
catch(Exception e) {
    // deal with exception
}
{code}

{note}
Every time you save a domain instance, Grails validates it using the constraints that you have defined. If any values in the domain instance violate those constraints, the save will fail and the constraint errors will be attached to the domain instance. This failure to save the domain instance happens quietly though. You won't know about it unless you check the return value of save() or call hasErrors().
{note}

You can find out more about the subtleties of saving data in [this article|http://blog.springsource.com/2010/06/23/gorm-gotchas-part-1/] - a must read!
