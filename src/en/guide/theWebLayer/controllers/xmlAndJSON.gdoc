h4. Using the render method to output XML

Grails supports a few different ways to produce XML and JSON responses. The first is the [render|controllers] method.

The @render@ method can be passed a block of code to do mark-up building in XML:

{code}
def list() {

    def results = Book.list()

    render(contentType: "text/xml") {
        books {
            for (b in results) {
                book(title: b.title)
            }
        }
    }
}
{code}

The result of this code would be something like:

{code:xml}
<books>
    <book title="The Stand" />
    <book title="The Shining" />
</books>
{code}

Be careful to avoid naming conflicts when using mark-up building. For example this code would produce an error:

{code}
def list() {

    def books = Book.list()  // naming conflict here

    render(contentType: "text/xml") {
        books {
            for (b in results) {
                book(title: b.title)
            }
        }
    }
}
{code}

This is because there is local variable @books@ which Groovy attempts to invoke as a method.

h4. Using the render method to output JSON

The @render@ method can also be used to output JSON:

{code}
def list() {

    def results = Book.list()

    render(contentType: "text/json") {
        books = array {
            for (b in results) {
                book title: b.title
            }
        }
    }
}
{code}

In this case the result would be something along the lines of:

{code}
[
    {"title":"The Stand"},
    {"title":"The Shining"}
]
{code}

The same dangers with naming conflicts described above for XML also apply to JSON building.

h4. Automatic XML Marshalling

Grails also supports automatic marshalling of [domain classes|guide:GORM] to XML using special converters.

To start off with, import the @grails.converters@ package into your controller:

{code}
import grails.converters.*
{code}

Now you can use the following highly readable syntax to automatically convert domain classes to XML:

{code}
render Book.list() as XML
{code}

The resulting output would look something like the following::

{code}
<?xml version="1.0" encoding="ISO-8859-1"?>
<list>
  <book id="1">
    <author>Stephen King</author>
    <title>The Stand</title>
  </book>
  <book id="2">
    <author>Stephen King</author>
    <title>The Shining</title>
  </book>
</list>
{code}

An alternative to using the converters is to use the [codecs|guide:codecs] feature of Grails. The codecs feature provides [encodeAsXML|guide:codecs] and [encodeAsJSON|guide:codecs] methods:

{code}
def xml = Book.list().encodeAsXML()
render xml
{code}

For more information on XML marshalling see the section on [REST|guide:REST]

h4. Automatic JSON Marshalling

Grails also supports automatic marshalling to JSON using the same mechanism. Simply substitute @XML@ with @JSON@:

{code}
render Book.list() as JSON
{code}

The resulting output would look something like the following:

{code}
[
    {"id":1,
     "class":"Book",
     "author":"Stephen King",
     "title":"The Stand"},
    {"id":2,
     "class":"Book",
     "author":"Stephen King",
     "releaseDate":new Date(1194127343161),
     "title":"The Shining"}
 ]
{code}

Again as an alternative you can use the @encodeAsJSON@ to achieve the same effect.
