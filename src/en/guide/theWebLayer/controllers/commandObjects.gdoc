Grails controllers support the concept of command objects. A command object is similar to a form bean in a framework like Struts.  They are useful for grouping a subset of request parameters into a single object using [data binding|guide:dataBinding].

h4. Declaring Command Objects

Command object classes are defined just like any other class.

{code:java}
@grails.validation.Validateable
class LoginCommand {
    String username
    String password

    static constraints = {
        username(blank: false, minSize: 6)
        password(blank: false, minSize: 6)
    }
}
{code}

As this example shows, since the command object class is marked with @Validateable you can define [constraints|guide:constraints] in command objects just like in [domain classes|guide:GORM].  

A command object does not need to be marked @Validateable if the following is true:

* The command object is defined in the same controller you wish to use it in
* The command object is used as the parameter to the action you wish to use it in

It is not required that command object classes be validateable.

h4. Using Command Objects

To use command objects, controller actions may optionally specify any number of command object parameters. The parameter types must be supplied so that Grails knows what objects to create and initialize.

Before the controller action is executed Grails will automatically create an instance of the command object class and populate its properties by binding the request parameters.  If the command object class is marked with @Validateable then the command object will be validated. For example:

{code:java}
class LoginController {

    def login(LoginCommand cmd) {
        if (cmd.hasErrors()) {
            redirect(action: 'loginForm')
            return
        }

        // work with the command object data
    }
}
{code}

h4. Command Objects and Dependency Injection

Command objects can participate in dependency injection. This is useful if your command object has some custom validation logic which uses a Grails [service|guide:services]:

{code}
@grails.validation.Validateable
class LoginCommand {

    def loginService

    String username
    String password

    static constraints = {
        username validator: { val, obj ->
            obj.loginService.canLogin(obj.username, obj.password)
        }
    }
}
{code}

In this example the command object interacts with the @loginService@ bean which is injected by name from the Spring @ApplicationContext@.
