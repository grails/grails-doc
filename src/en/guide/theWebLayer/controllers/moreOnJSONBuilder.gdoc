The previous section on on XML and JSON responses covered simplistic examples of rendering XML and JSON responses. Whilst the XML builder used by Grails is the standard "XmlSlurper":http://groovy.codehaus.org/Reading+XML+using+Groovy's+XmlSlurper found in Groovy, the JSON builder is a custom implementation specific to Grails.

h4. JSONBuilder and Grails versions

JSONBuilder behaves different depending on the version of Grails you use. For version below 1.2 the deprecated [grails.web.JSONBuilder|api:grails.web.JSONBuilder] class is used. This section covers the usage of the Grails 1.2 JSONBuilder

For backwards compatibility the old @JSONBuilder@ class is used with the @render@ method for older applications; to use the newer/better @JSONBuilder@ class set the following in @application.groovy@:

{code}
grails.json.legacy.builder = false
{code}

h4. Rendering Simple Objects

To render a simple JSON object just set properties within the context of the Closure:

{code}
render(contentType: "application/json") {
    hello = "world"
}
{code}

The above will produce the JSON:

{code}
{"hello":"world"}
{code}

h4. Rendering JSON Arrays

To render a list of objects simple assign a list:

{code}
render(contentType: "application/json") {
    categories = ['a', 'b', 'c']
}
{code}

This will produce:

{code}
{"categories":["a","b","c"]}
{code}

You can also render lists of complex objects, for example:

{code}
render(contentType: "application/json") {
    categories = [ { a = "A" }, { b = "B" } ]
}
{code}

This will produce:

{code}
{"categories":[ {"a":"A"} , {"b":"B"}] }
{code}

Use the special @element@ method to return a list as the root:

{code}
render(contentType: "application/json") {
    element 1
    element 2
    element 3
}
{code}

The above code produces:

{code}
[1,2,3]
{code}

h4. Rendering Complex Objects

Rendering complex objects can be done with Closures. For example:

{code}
render(contentType: "application/json") {
    categories = ['a', 'b', 'c']
    title = "Hello JSON"
    information = {
        pages = 10
    }
}
{code}

The above will produce the JSON:

{code}
{"categories":["a","b","c"],"title":"Hello JSON","information":{"pages":10}}
{code}

h4. Arrays of Complex Objects

As mentioned previously you can nest complex objects within arrays using Closures:

{code}
render(contentType: "application/json") {
    categories = [ { a = "A" }, { b = "B" } ]
}
{code}

You can use the @array@ method to build them up dynamically:

{code}
def results = Book.list()
render(contentType: "application/json") {
    books = array {
        for (b in results) {
            book title: b.title
        }
    }
}
{code}

h4. Direct JSONBuilder API Access

If you don't have access to the @render@ method, but still want to produce JSON you can use the API directly:

{code}
def builder = new JSONBuilder()

def result = builder.build {
    categories = ['a', 'b', 'c']
    title = "Hello JSON"
    information = {
        pages = 10
    }
}

// prints the JSON text
println result.toString()

def sw = new StringWriter()
result.render sw
{code}
