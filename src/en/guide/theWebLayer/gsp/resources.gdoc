Grails 2.0 integrates with the [Asset Pipeline plugin|http://grails.org/plugin/asset-pipeline] to provide sophisticated static asset management. This plugin is installed by default in new Grails applications.

The basic way to include a link to a static asset in your application is to use the [resource|tags] tag. This simple approach creates a URI pointing to the file.

However modern applications with dependencies on multiple JavaScript and CSS libraries and frameworks (as well as dependencies on multiple Grails plugins) require something more powerful.

The issues that the Asset-Pipeline plugin tackles are:

* Reduced Dependence - The plugin has compression, minification, and cache-digests built in.
* Easy Debugging - Makes for easy debugging by keeping files separate in development mode.
* Asset Bundling using require [directives|http://bertramdev.github.io/asset-pipeline/guide/usage.html#directives].
* Web application performance tuning is difficult.
* The need for a standard way to expose static assets in plugins and applications.
* The need for extensible processing to make languages like LESS or Coffee first class citizens.

The asset-pipeline allows you to define your javascript or css requirements right at the top of the file and they get compiled on War creation.

Take a look at the [documentation|http://bertramdev.github.io/asset-pipeline] for the asset-pipeline to get started.

If you do not want to use the Asset-Pipeline plugin, you can serve the static assets from directories `src/main/resources/public` or `src/main/webapp`, but the latter one only gets included in WAR packaging but not in JAR packaging.
