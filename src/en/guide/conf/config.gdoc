Configuration in Grails is generally split across 2 areas: build configuration and runtime configuration.

Build configuration is generally done via Gradle and the @build.gradle@ file. Runtime configuration is by default specified in YAML in the @grails-app/conf/application.yml@ file.

If you prefer to use Grails 2.0-style Groovy configuration then you can create an additional @grails-app/conf/application.groovy@ file to specify configuration using Groovy's "ConfigSlurper":http://groovy.codehaus.org/ConfigSlurper syntax.

For Groovy configuration the following variables are available to the configuration script:

{table}
*Variable* | *Description*
userHome | Location of the home directory for the account that is running the Grails application.
grailsHome | Location of the directory where you installed Grails. If the @GRAILS_HOME@ environment variable is set, it is used.
appName | The application name as it appears in application.properties.
appVersion | The application version as it appears in application.properties.
{table}

For example:

{code}
my.tmp.dir = "\${userHome}/.grails/tmp"
{code}


If you want to read runtime configuration settings, i.e. those defined in @application.yml@, use the [@grailsApplication@|api:grails.core.GrailsApplication] object, which is available as a variable in controllers and tag libraries:

{code}
class MyController {
    def hello() {
        def recipient = grailsApplication.config.getProperty('foo.bar.hello')

        render "Hello ${recipient}"
    }
}
{code}

The @config@ property of the @grailsApplication@ object is an instance of the [Config|api:grails.config.Config] interface and provides a number of useful methods to read the configuration of the application.

In particular, the @getProperty@ method (seen above) is useful for efficiently retrieving configuration properties, while specifying the property type (the default type is String) and/or providing a default fallback value.

{code}
class MyController {

    def hello(Recipient recipient) {
        //Retrieve Integer property 'foo.bar.max.hellos', otherwise use value of 5
        def max = grailsApplication.config.getProperty('foo.bar.max.hellos', Integer, 5)

        //Retrieve property 'foo.bar.greeting' without specifying type (default is String), otherwise use value "Hello"
        def greeting = grailsApplication.config.getProperty('foo.bar.greeting', "Hello")

        def message = (recipient.receivedHelloCount >= max) ?
          "Sorry, you've been greeted the max number of times" :  "${greeting}, ${recipient}"
        }

        render message
    }
}
{code}


Notice that the @Config@ instance is a merged configuration based on Spring's [PropertySource|api:org.springframework.context.annotation.PropertySource] concept and reads configuration from the environment, system properties and the local application configuration merging them into a single object.

@GrailsApplication@ can be easily injected into services and other Grails artifacts:

{code}
import grails.core.*

class MyService {
    GrailsApplication grailsApplication

    String greeting() {
        def recipient = grailsApplication.config.getProperty('foo.bar.hello')
        return "Hello ${recipient}"
    }
}
{code}

Finally, you can also use Spring's [Value|api:org.springframework.beans.factory.annotation.Value] annotation to inject configuration values:

{code}
import org.springframework.beans.factory.annotation.*

class MyController {
    @Value('${foo.bar.hello}')
    String recipient

    def hello() {
        render "Hello ${recipient}"
    }
}
{code}

{note}
In Groovy code you must use single quotes around the string for the value of the @Value@ annotation otherwise it is interpreted as a GString not a Spring expression.
{note}

As you can see, when accessing configuration settings you use the same dot notation as when you define them.
