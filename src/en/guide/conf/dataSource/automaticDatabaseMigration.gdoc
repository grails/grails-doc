The @dbCreate@ property of the @DataSource@ definition is important as it dictates what Grails should do at runtime with regards to automatically generating the database tables from [GORM|guide:GORM] classes. The options are described in the [DataSource|guide:dataSource] section:

* @create@
* @create-drop@
* @update@
* @validate@
* no value

In [development|guide:environments] mode @dbCreate@ is by default set to "create-drop", but at some point in development (and certainly once you go to production) you'll need to stop dropping and re-creating the database every time you start up your server.

It's tempting to switch to @update@ so you retain existing data and only update the schema when your code changes, but Hibernate's update support is very conservative. It won't make any changes that could result in data loss, and doesn't detect renamed columns or tables, so you'll be left with the old one and will also have the new one.

Grails supports migrations via the "Database Migration":http://grails.org/plugin/database-migration plugin which can be installed by declaring the plugin in @grails-app/conf/BuildConfig.groovy@:

{code:java}
grails.project.dependency.resolution = {
    ...
    plugins {
        runtime ':database-migration:1.3.1'
    }
}
{code}

The plugin uses "Liquibase":http://www.liquibase.org/ and and provides access to all of its functionality, and also has support for GORM (for example generating a change set by comparing your domain classes to a database).
