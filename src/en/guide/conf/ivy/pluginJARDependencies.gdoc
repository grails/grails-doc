h4. Specifying Plugin JAR dependencies

The way in which you specify dependencies for a [plugin|guide:plugins] is identical to how you specify dependencies in an application. When a plugin is installed into an application the application automatically inherits the dependencies of the plugin.

To define a dependency that is resolved for use with the plugin but not _exported_ to the application then you can set the @export@ property of the dependency:

{code}
test('org.spockframework:spock-core:0.5-groovy-1.8') {
    export = false
}
{code}

In this case the Spock dependency will be available only to the plugin and not resolved as an application dependency. Alternatively, if you're using the Map syntax:

{code}
test group: 'org.spockframework', name: 'spock-core',
     version: '0.5-groovy-1.8', export: false
{code}

{note}
You can use @exported = false@ instead of @export = false@, but we recommend the latter because it's consistent with the Map argument.
{note}

h4. Overriding Plugin JAR Dependencies in Your Application

If a plugin is using a JAR which conflicts with another plugin, or an application dependency then you can override how a plugin resolves its dependencies inside an application using exclusions. For example:

{code}
plugins {
    compile("\:hibernate\:\$grailsVersion") {
        excludes "javassist"
    }
}

dependencies {
    runtime "javassist:javassist:3.4.GA"
}
{code}

In this case the application explicitly declares a dependency on the "hibernate" plugin and specifies an exclusion using the @excludes@ method, effectively excluding the javassist library as a dependency.
