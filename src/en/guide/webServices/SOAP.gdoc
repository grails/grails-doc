Grails does not feature SOAP support out-of-the-box, but there are several plugins that can help for both producing SOAP servers and calling SOAP web services.

h4. SOAP Clients

To call SOAP web services there are generally 2 approaches taken, one is to use a tool to generate client stubs, the other is to manually construct the SOAP calls. The former can be easier to use, but the latter provides more flexibility / control.

The [CXF client plugin|http://grails.org/plugin/cxf-client] uses the CXF framework, which includes a @wsdl2java@ tool for generating a client. There is nothing Groovy/Grails specific here in the generated code as it simply provides a Java API which you can invoke to call SOAP web services.

See the documentation on the [CXF client plugin|https://github.com/ctoestreich/cxf-client] for further information.

Alternatively, if you prefer more control over your SOAP calls the [WS-Lite library|https://github.com/jwagenleitner/groovy-wslite] is an excellent choice and features a [Grails plugin|http://grails.org/plugin/wslite]. You have more control over the SOAP requests sent, and since Groovy has fantastic support for building and parsing XML it can be very productive approach. 

Below is an example of a SOAP call with wslite:

{code}
withSoap(serviceURL: 'http://www.holidaywebservice.com/Holidays/US/Dates/USHolidayDates.asmx') {
    def response = send {
        body {
            GetMothersDay(xmlns: 'http://www.27seconds.com/Holidays/US/Dates/') {
                year(2011)
            }
        }
    }
    println response.GetMothersDayResponse.GetMothersDayResult.text()
}
{code}

It is not recommended that you use the [GroovyWS|http://groovy.codehaus.org/GroovyWS] library, it pulls in many dependencies which increases the likelihood of conflicts. The WSlite library provides a far simpler and easier to use solution.

h4. SOAP Servers

Again, Grails does not have direct support for exposing SOAP web services, however if you wish to expose a SOAP service from your application then the [CXF plugin|http://grails.org/plugin/cxf] (not to be confused with the cxf-client plugin), provides an easy way to do so.

Typically it involves taking a Grails service and adding 'expose'-style configuration, such as the below:

{code}
  static expose = EndpointType.JAX_WS_WSDL
  //your path (preferred) or url to wsdl
  static wsdl = 'org/grails/cxf/test/soap/CustomerService.wsdl' 
{code}

Please refer to the [documentation of the plugin|https://github.com/thorstadt/grails-cxf#soap] for more information.