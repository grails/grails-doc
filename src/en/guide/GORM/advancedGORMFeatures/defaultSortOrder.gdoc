You can sort objects using query arguments such as those found in the [list|domainClasses] method:

{code:java}
def airports = Airport.list(sort:'name')
{code}

However, you can also declare the default sort order for a collection in the mapping:

{code:java}
class Airport {
    ...
    static mapping = {
        sort "name"
    }
}
{code}

The above means that all collections of @Airport@ instances will by default be sorted by the airport name. If you also want to change the sort _order_, use this syntax:

{code:java}
class Airport {
    ...
    static mapping = {
        sort name: "desc"
    }
}
{code}

Finally, you can configure sorting at the association level:

{code:java}
class Airport {
    ...
    static hasMany = [flights: Flight]

    static mapping = {
        flights sort: 'number', order: 'desc'
    }
}
{code}

In this case, the @flights@ collection will always be sorted in descending order of flight number.

{warning}
These mappings will not work for default unidirectional one-to-many or many-to-many relationships because they involve a join table. See [this issue|https://jira.grails.org/browse/GRAILS-4089] for more details. Consider using a @SortedSet@ or queries with sort parameters to fetch the data you need. 
{warning}
