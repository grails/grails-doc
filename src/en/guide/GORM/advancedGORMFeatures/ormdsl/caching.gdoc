h4. Setting up caching

"Hibernate":http://www.hibernate.org/ features a second-level cache with a customizable cache provider. This needs to be configured in the @grails-app/conf/application.yml@ file as follows:

{code}
hibernate:
  cache:
    use_second_level_cache: true
    provider_class: net.sf.ehcache.hibernate.EhCacheProvider
    region:
       factory_class: org.hibernate.cache.ehcache.EhCacheRegionFactory
{code}

You can customize any of these settings, for example to use a distributed caching mechanism.

{note}
For further reading on caching and in particular Hibernate's second-level cache, refer to the [Hibernate documentation|http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html/performance.html#performance-cache] on the subject.
{note}

h4. Caching instances

Call the @cache@ method in your mapping block to enable caching with the default settings:

{code:java}
class Person {
    ...
    static mapping = {
        table 'people'
        cache true
    }
}
{code}

This will configure a 'read-write' cache that includes both lazy and non-lazy properties. You can customize this further:

{code:java}
class Person {
    ...
    static mapping = {
        table 'people'
        cache usage: 'read-only', include: 'non-lazy'
    }
}
{code}

h4. Caching associations

As well as the ability to use Hibernate's second level cache to cache instances you can also cache collections (associations) of objects. For example:

{code:java}
class Person {

    String firstName

    static hasMany = [addresses: Address]

    static mapping = {
        table 'people'
        version false
        addresses column: 'Address', cache: true
    }
}
{code}

{code:java}
class Address {
    String number
    String postCode
}
{code}

This will enable a 'read-write' caching mechanism on the @addresses@ collection. You can also use:

{code:java}
cache: 'read-write' // or 'read-only' or 'transactional'
{code}

to further configure the cache usage.

h4. Caching Queries

You can cache queries such as dynamic finders and criteria. To do so using a dynamic finder you can pass the @cache@ argument:

{code:java}
def person = Person.findByFirstName("Fred", [cache: true])
{code}

{note}
In order for the results of the query to be cached, you must enable caching in your mapping as discussed in the previous section.
{note}

You can also cache criteria queries:

{code:java}
def people = Person.withCriteria {
    like('firstName', 'Fr%')
    cache true
}
{code}

h4. Cache usages

Below is a description of the different cache settings and their usages:

* @read-only@ - If your application needs to read but never modify instances of a persistent class, a read-only cache may be used.
* @read-write@ - If the application needs to update data, a read-write cache might be appropriate.
* @nonstrict-read-write@ - If the application only occasionally needs to update data (i.e. if it is very unlikely that two transactions would try to update the same item simultaneously) and strict transaction isolation is not required, a @nonstrict-read-write@ cache might be appropriate.
* @transactional@ - The @transactional@ cache strategy provides support for fully transactional cache providers such as JBoss TreeCache. Such a cache may only be used in a JTA environment and you must specify @hibernate.transaction.manager_lookup_class@ in the @grails-app/conf/application.groovy@ file's @hibernate@ config.
