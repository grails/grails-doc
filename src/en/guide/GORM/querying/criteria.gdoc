Criteria is an advanced way to query that uses a Groovy builder to construct potentially complex queries. It is a much better approach than building up query strings using a @StringBuffer@.

Criteria can be used either with the [createCriteria|domainClasses] or [withCriteria|domainClasses] methods. The builder uses Hibernate's Criteria API. The nodes on this builder map the static methods found in the [Restrictions|api:org.hibernate.criterion.Restrictions] class of the Hibernate Criteria API. For example:

{code}
def c = Account.createCriteria()
def results = c {
    between("balance", 500, 1000)
    eq("branch", "London")
    or {
        like("holderFirstName", "Fred%")
        like("holderFirstName", "Barney%")
    }
    maxResults(10)
    order("holderLastName", "desc")
}
{code}

This criteria will select up to 10 @Account@ objects in a List matching the following criteria:

* @balance@ is between 500 and 1000
* @branch@ is 'London'
* @holderFirstName@ starts with 'Fred' or 'Barney'

The results will be sorted in descending order by @holderLastName@.

If no records are found with the above criteria, an empty List is returned.

h4. Conjunctions and Disjunctions

As demonstrated in the previous example you can group criteria in a logical OR using an @or { }@ block:

{code:java}
or {
    between("balance", 500, 1000)
    eq("branch", "London")
}
{code}

This also works with logical AND:

{code:java}
and {
    between("balance", 500, 1000)
    eq("branch", "London")
}
{code}

And you can also negate using logical NOT:

{code:java}
not {
    between("balance", 500, 1000)
    eq("branch", "London")
}
{code}

All top level conditions are implied to be AND'd together.

h4. Querying Associations

Associations can be queried by having a node that matches the property name. For example say the @Account@ class had many @Transaction@ objects:

{code}
class Account {
    ...
    static hasMany = [transactions: Transaction]
    ...
}
{code}

We can query this association by using the property name @transaction@ as a builder node:

{code:java}
def c = Account.createCriteria()
def now = new Date()
def results = c.list {
    transactions {
        between('date', now - 10, now)
    }
}
{code}

The above code will find all the @Account@ instances that have performed @transactions@ within the last 10 days.
You can also nest such association queries within logical blocks:

{code:java}
def c = Account.createCriteria()
def now = new Date()
def results = c.list {
    or {
        between('created', now - 10, now)
        transactions {
            between('date', now - 10, now)
        }
    }
}
{code}

Here we find all accounts that have either performed transactions in the last 10 days OR have been recently created in the last 10 days.

h4. Querying with Projections

Projections may be used to customise the results. Define a "projections" node within the criteria builder tree to use projections. There are equivalent methods within the projections node to the methods found in the Hibernate [Projections|api:org.hibernate.criterion.Projections] class:

{code:java}
def c = Account.createCriteria()

def numberOfBranches = c.get {
    projections {
        countDistinct('branch')
    }
}
{code}

When multiple fields are specified in the projection, a List of values will be returned. A single value will be returned otherwise.

h4. SQL Projections

The criteria DSL provides access to Hibernate's SQL projection API.

{code:java}
// Box is a domain class...
class Box {
    int width
    int height
}
{code}

{code:java}
// Use SQL projections to retrieve the perimeter and area of all of the Box instances...
def c = Box.createCriteria()

def results = c.list {
    projections {
      sqlProjection '(2 * (width + height)) as perimiter, (width * height) as area', ['perimeter', 'area'], [INTEGER, INTEGER]
    }
}
{code}

The first argument to the @sqlProjection@ method is the SQL which defines the projections.  The second argument is a list of
Strings which represent column aliases corresponding to the projected values expressed in the SQL.  The third argument
is a list of @org.hibernate.type.Type@ instances which correspond to the projected values expressed in the SQL.  The API
supports all @org.hibernate.type.Type@ objects but constants like INTEGER, LONG, FLOAT etc. are provided by the DSL which
correspond to all of the types defined in @org.hibernate.type.StandardBasicTypes@.

Consider that the following table represents the data in the
@BOX@ table.
{table}
width | height
2 | 7 
2 | 8 
2 | 9 
4 | 9 
{table}

The query above would return results like this:

{code}
[[18, 14], [20, 16], [22, 18], [26, 36]]
{code}

Each of the inner lists contains the 2 projected values for each @Box@, perimiter and area.

{note}
Note that if there are other references in scope wherever your criteria query is expressed that have names that conflict 
with any of the type constants described above, the code in your criteria will refer to those references, not the type
constants provided by the DSL.  In the unlikely event of that happening you can disambiguate the conflict by referring
to the fully qualified Hibernate type.  For example @StandardBasicTypes.INTEGER@ instead of @INTEGER@.
{note}

If only 1 value is being projected, the alias and the type do not need to be included in a list.

{code:java}
def results = c.list {
    projections {
      sqlProjection 'sum(width * height) as totalArea', 'totalArea', INTEGER
    }
}
{code}

That query would return a single result with the value of 84 as the total area of all of the @Box@ instances.

The DSL supports grouped projections with the @sqlGroupProjection@ method.

{code:java}
def results = c.list {
    projections {
        sqlGroupProjection 'width, sum(height) as combinedHeightsForThisWidth', 'width', ['width', 'combinedHeightsForThisWidth'], [INTEGER, INTEGER]
    }
}
{code}

The first argument to the @sqlProjection@ method is the SQL which defines the projections.  The second argument represents the
group by clause that should be part of the query.  That string may be single column name or a comma separated list of column
names.  The third argument is a list of
Strings which represent column aliases corresponding to the projected values expressed in the SQL.  The fourth argument
is a list of @org.hibernate.type.Type@ instances which correspond to the projected values expressed in the SQL.

The query above is projecting the combined heights of boxes grouped by width and would return results that look like this:

{code}
[[2, 24], [4, 9]]
{code}

Each of the inner lists contains 2 values.  The first value is a box width and the second value is the sum of the heights
of all of the boxes which have that width.

h4. Using SQL Restrictions

You can access Hibernate's SQL Restrictions capabilities.

{code:java}
def c = Person.createCriteria()

def peopleWithShortFirstNames = c.list {
    sqlRestriction "char_length(first_name) <= 4"
}
{code}

SQL Restrictions may be parameterized to deal with SQL injection vulnerabilities related to dynamic restrictions.


{code:java}
def c = Person.createCriteria()

def peopleWithShortFirstNames = c.list {
    sqlRestriction "char_length(first_name) < ? AND char_length(first_name) > ?", [maxValue, minValue]
}
{code}


{note}
Note that the parameter there is SQL. The @first_name@ attribute referenced in the example refers to the persistence model, not the object model like in HQL queries. The @Person@ property named @firstName@ is mapped to the @first_name@ column in the database and you must refer to that in the @sqlRestriction@ string.

Also note that the SQL used here is not necessarily portable across databases.
{note}

h4. Using Scrollable Results

You can use Hibernate's [ScrollableResults|api:org.hibernate.ScrollableResults] feature by calling the scroll method:

{code:java}
def results = crit.scroll {
    maxResults(10)
}
def f = results.first()
def l = results.last()
def n = results.next()
def p = results.previous()

def future = results.scroll(10)
def accountNumber = results.getLong('number')
{code}

To quote the documentation of Hibernate ScrollableResults:

{quote}
A result iterator that allows moving around within the results by arbitrary increments. The Query / ScrollableResults pattern is very similar to the JDBC PreparedStatement/ ResultSet pattern and the semantics of methods of this interface are similar to the similarly named methods on ResultSet.
{quote}

Contrary to JDBC, columns of results are numbered from zero.

h4. Setting properties in the Criteria instance

If a node within the builder tree doesn't match a particular criterion it will attempt to set a property on the Criteria object itself. This allows full access to all the properties in this class. This example calls @setMaxResults@ and @setFirstResult@ on the [Criteria|api:org.hibernate.Criteria] instance:

{code:java}
import org.hibernate.FetchMode as FM
...
def results = c.list {
    maxResults(10)
    firstResult(50)
    fetchMode("aRelationship", FM.JOIN)
}
{code}

h4. Querying with Eager Fetching

In the section on [Eager and Lazy Fetching|guide:fetching] we discussed how to declaratively specify fetching to avoid the N+1 SELECT problem. However, this can also be achieved using a criteria query:

{code:java}

def criteria = Task.createCriteria()
def tasks = criteria.list{
    eq "assignee.id", task.assignee.id
    join 'assignee'
    join 'project'
    order 'priority', 'asc'
}
{code}

Notice the usage of the @join@ method: it tells the criteria API to use a @JOIN@ to fetch the named associations with the @Task@ instances. It's probably best not to use this for one-to-many associations though, because you will most likely end up with duplicate results. Instead, use the 'select' fetch mode:
{code}
import org.hibernate.FetchMode as FM
...
def results = Airport.withCriteria {
    eq "region", "EMEA"
    fetchMode "flights", FM.SELECT
}
{code}
Although this approach triggers a second query to get the @flights@ association, you will get reliable results  - even with the @maxResults@ option.

{note}
@fetchMode@ and @join@ are general settings of the query and can only be specified at the top-level, i.e. you cannot use them inside projections or association constraints.
{note}

An important point to bear in mind is that if you include associations in the query constraints, those associations will automatically be eagerly loaded. For example, in this query:
{code}
def results = Airport.withCriteria {
    eq "region", "EMEA"
    flights {
        like "number", "BA%"
    }
}
{code}
the @flights@ collection would be loaded eagerly via a join even though the fetch mode has not been explicitly set.

h4. Method Reference

If you invoke the builder with no method name such as:

{code:java}
c { ... }
{code}

The build defaults to listing all the results and hence the above is equivalent to:

{code:java}
c.list { ... }
{code}

{table}
Method | Description
*list* | This is the default method. It returns all matching rows.
*get* | Returns a unique result set, i.e. just one row. The criteria has to be formed that way, that it only queries one row. This method is not to be confused with a limit to just the first row.
*scroll* | Returns a scrollable result set.
*listDistinct* | If subqueries or associations are used, one may end up with the same row multiple times in the result set, this allows listing only distinct entities and is equivalent to @DISTINCT_ROOT_ENTITY@ of the [CriteriaSpecification|api:org.hibernate.criterion.CriteriaSpecification] class.
*count* | Returns the number of matching rows.
{table}

h4. Combining Criteria

You can combine multiple criteria closures in the following way:

{code:java}
def emeaCriteria = {
    eq "region", "EMEA"
}

def results = Airport.withCriteria {
    emeaCriteria.delegate = delegate
    emeaCriteria()
    flights {
        like "number", "BA%"
    }
}
{code}

This technique requires that each criteria must refer to the same domain class (i.e. @Airport@).
A more flexible approach is to use Detached Criteria, as described in the following section.