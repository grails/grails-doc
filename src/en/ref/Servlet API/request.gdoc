h1. request

h2. Purpose

The @request@ object is an instance of the Servlet API's [HttpServletRequest|api:javax.servlet.http.HttpServletRequest] interface

h2. Examples

{code}
class BookController {
    def list() {
        log.info "User agent: " + request.getHeader("User-Agent")

        render(view: actionName)
    }
}
{code}

h2. Description

The [HttpServletRequest|api:javax.servlet.http.HttpServletRequest] class is useful for, amongst other things, obtaining request headers, storing request scoped attributes and establishing information about the client. Refer to the Servlet API's javadocs for further information.

Grails enhances the @HttpServletRequest@ instance by adding the following new properties and methods:

* @XML@ - An instance of @XmlSlurper@'s [GPathResult|http://groovy.codehaus.org/api/groovy/util/slurpersupport/GPathResult.html] class that allows parsing of an incoming XML request (useful for REST).
* @JSON@ - An instance of Grails' [JSONObject|api:org.codehaus.groovy.grails.web.json.JSONObject] class that allows parsing of an incoming JSON request (useful for JSON based REST).
* @forwardURI@ - Useful for obtaining the current request URI since the @request@ objects @requestURI@ property returns the original URI, not the matched one.
* @isRedirected()@ - Returns @true@ if a redirect has been issued for this request (Grails 2+).
* @get@ - Returns true if the current request is an HTTP @GET@ request.
* @post@ - Returns true if the current request is an HTTP @POST@ request.
* @each@ - Implementation of Groovy's @each@ method for iterating over request attributes.
* @find@ - Implementation of Groovy's default @find@ method for searching request attributes.
* @findAll@ - Implementation of Groovy's default @findAll@ method for searching request attributes.
* @format@ - The request format, used for [content negotiation|guide:contentNegotiation].
* @withFormat(Closure)@ - The withFormat method, used for [content negotiation|guide:contentNegotiation].
* @xhr@ - Returns @true@ if the current request is an Ajax request.

The @XML@ and @JSON@ properties are useful for XML APIs and can be used to parse incoming XML or JSON packages. For example given a request body of:

{code:xml}
<book>
   <title>The Stand</title>
</book>
{code}

This can be parsed easily:

{code:java}
def title = request.XML?.title
render "The Title is $title"
{code}

Request attributes which are normally accessible from the [getAttribute|api:javax.servlet.ServletRequest#getAttribute(java.lang.String)] can also be indexed into using the array index operator or de-reference operator:

{code:java}
def user = request['user']

request['user'] = 'John'

asset 'John' == request.user
{code}
