h1. createCriteria

h2. Purpose

Creates and returns an instance of Grails' [HibernateCriteriaBuilder|http://grails.github.io/grails-data-mapping/latest/api/grails/orm/HibernateCriteriaBuilder.html] that can be used to construct criteria queries.

h2. Examples

The criterion methods (like, and, or, between etc) used to build the criteria can be statically imported from HibernateCriteriaBuilder (as in the following examples in this document), or written as "c.like(...)", "c.between(...)" etc.

{code:java}
def c = Account.createCriteria()
def results = c.list {
    like("holderFirstName", "Fred%")
    and {
        between("balance", 500, 1000)
        eq("branch", "London")
    }
    maxResults(10)
    order("holderLastName", "desc")
}
{code}

To use pagination you would have to make another query to retrieve the total number of matching results. A better way is to pass the pagination values as arguments to the criteria method as shown below:

{code:java}
def c = Account.createCriteria()
def results = c.list (max: 10, offset: 10) {
    like("holderFirstName", "Fred%")
    and {
        between("balance", 500, 1000)
        eq("branch", "London")
    }
    order("holderLastName", "desc")
}
{code}

Because that query includes pagination parameters (max and offset), this will return a [PagedResultList|http://grails.github.io/grails-data-mapping/latest/api/grails/orm/PagedResultList.html] which has a getTotalCount() method to return the total number of matching records for pagination. Two queries are still run, but they are run for you and the results and total count are combined in the @PagedResultList@.

{code:java}
println "Rendering ${results.size()} Accounts of ${results.totalCount}"
{code}

h2. Description

Criteria queries are a type-safe, advanced way to query that uses a Groovy builder to construct potentially complex queries. It is a much better alternative to using a StringBuilder to dynamically construct an HQL query. Refer to the user guide section on [Criteria|http://gorm.grails.org/6.0.x/hibernate/manual/index.html#criteria] for usage instructions.

Method reference:

{table}
Method | Description
*list* | The default method; returns all matching rows.
*get* | Returns a unique result, i.e. just one row. The criteria has to be formed that way, that it only queries one row. This method is not to be confused with a limit to just the first row.
*scroll* | Returns a scrollable result set
*listDistinct* | If subqueries or associations are used, one may end up with the same row multiple times in the result set. In Hibernate one would do a "CriteriaSpecification.DISTINCT_ROOT_ENTITY". In Grails one can do it by just using this method.
{table}

{warning}
The @listDistinct()@ method does not work well with the pagination options @maxResult@ and @firstResult@. If you need distinct results with pagination, we currently recommend that you use HQL. You can find out more information from [this blog post|http://floledermann.blogspot.com/2007/10/solving-hibernate-criterias-distinct.html].
{warning}

If you invoke the builder with no method name

{code:java}
c { ... }
{code}

the @list()@ method will be invoked automatically. In other words, it's the equivalent of

{code:java}
c.list { ... }
{code}

Below is a node reference for each criterion method:

{table}
Node | Description | Example
*between* | Where the property value is between two distinct values | {code}
between("balance", 500, 1000)
{code}
 *eq* | Where a property equals a particular value.| {code}
eq("branch", "London")
{code}
 *eq* (case-insensitive) | A version of *eq* that supports an optional 3rd Map parameter to specify that the query be case-insensitive. | {code}
eq("branch", "london", [ignoreCase: true])
{code}
 *eqProperty* | Where one property must equal another | {code}
eqProperty("lastTx", "firstTx")
{code}
 *gt* | Where a property is greater than a particular value | {code}
gt("balance",1000)
{code}
 *gtProperty* | Where one property must be greater than another | {code}
gtProperty("balance", "overdraft")
{code}
 *ge* | Where a property is greater than or equal to a particular value | {code}
ge("balance", 1000)
{code}
 *geProperty* | Where one property must be greater than or equal to another | {code}
geProperty("balance", "overdraft")
{code}
 *idEq* | Where an objects id equals the specified value | {code}
idEq(1)
{code}
 *ilike* | A case-insensitive 'like' expression | {code}
ilike("holderFirstName", "Steph%")
{code}
 *in* | Where a property is contained within the specified list of values. Can also be chained with the @not@ method where a property is not contained within the specified list of values. Note: 'in' is a Groovy reserve word, so it must be escaped by quotes. | {code}
'in'("age",[18..65]) or not {'in'("age",[18..65])}
{code}
 *isEmpty* | Where a collection property is empty | {code}
isEmpty("transactions")
{code}
 *isNotEmpty* | Where a collection property is not empty | {code}
isNotEmpty("transactions")
{code}
 *isNull* | Where a property is @null@ | {code}
isNull("holderGender")
{code}
 *isNotNull* | Where a property is not @null@ | {code}
isNotNull("holderGender")
{code}
 *lt* | Where a property is less than a particular value | {code}
lt("balance", 1000)
{code}
 *ltProperty* | Where one property must be less than another | {code}
ltProperty("balance", "overdraft")
{code}
 *le* | Where a property is less than or equal to a particular value | {code}
le("balance", 1000)
{code}
 *leProperty* | Where one property must be less than or equal to another | {code}
leProperty("balance", "overdraft")
{code}
 *like* | Equivalent to SQL like expression | {code}
like("holderFirstName", "Steph%")
{code}
 *ne* | Where a property does not equal a particular value | {code}
ne("branch", "London")
{code}
 *neProperty* | Where one property does not equal another | {code}
neProperty("lastTx", "firstTx")
{code}
 *order* | Order the results by a particular property | {code}
order("holderLastName", "desc")
{code}
 *rlike* | Similar to like, but uses a regex. Only supported on Oracle and MySQL. | {code}
rlike("holderFirstName", /Steph.+/)
{code}
 *sizeEq* | Where a collection property's size equals a particular value | {code}
sizeEq("transactions", 10)
{code}
 *sizeGt* | Where a collection property's size is greater than a particular value | {code}
sizeGt("transactions", 10)
{code}
 *sizeGe* | Where a collection property's size is greater than or equal to a particular value | {code}
sizeGe("transactions", 10)
{code}
 *sizeLt* | Where a collection property's size is less than a particular value | {code}
sizeLt("transactions", 10)
{code}
 *sizeLe* | Where a collection property's size is less than or equal to a particular value | {code}
sizeLe("transactions", 10)
{code}
 *sizeNe* | Where a collection property's size is not equal to a particular value | {code}
sizeNe("transactions", 10)
{code}
 *sqlRestriction* | Use arbitrary SQL to modify the resultset  | {code}
sqlRestriction "char_length(first_name) = 4"
{code}
{table}

With dynamic finders, you have access to options such as @max@, @sort@, etc. These are available to criteria queries as well, but they have different names:

{table}
Name | Description | Example
*order*(String, String) | Specifies both the sort column (the first argument) and the sort order (either 'asc' or 'desc'). | {code}
order "age", "desc"
{code}
*firstResult*(int) | Specifies the offset for the results. A value of 0 will return all records up to the maximum specified. | {code}
firstResult 20
{code}
*maxResults*(int) | Specifies the maximum number of records to return. | {code}
maxResults 10
{code}
*cache*(boolean) | Indicates if the query should be cached (if the query cache is enabled). | {code}
cache @true@
{code}
{table}

Criteria also support the notion of projections. A projection is used to change the nature of the results. For example the following query uses a projection to count the number of distinct @branch@ names that exist for each @Account@:

{code:java}
def c = Account.createCriteria()
def branchCount = c.get {
    projections {
        countDistinct "branch"
    }
}
{code}

The following table summarizes the different projections and what they do:

{table}
Name | Description | Example
*property* | Returns the given property in the returned results | {code:java}
property("firstName"){code}
*distinct* | Returns results using a single or collection of distinct property names | {code:java}
distinct("fn") or distinct(['fn', 'ln']){code}
*avg* | Returns the average value of the given property | {code:java}
avg("age"){code}
*count* | Returns the count of the given property name | {code:java}
count("branch"){code}
*countDistinct* | Returns the count of the given property name for distinct rows | {code:java}
countDistinct("branch"){code}
*groupProperty* | Groups the results by the given property | {code:java}
groupProperty("lastName"){code}
*max* | Returns the maximum value of the given property | {code:java}
max("age"){code}
*min* | Returns the minimum value of the given property | {code:java}
min("age"){code}
*sum* | Returns the sum of the given property | {code:java}
sum("balance"){code}
*rowCount* | Returns count of the number of rows returned | {code:java}
rowCount(){code}

{table}
