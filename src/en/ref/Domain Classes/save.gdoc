h1. save

h2. Purpose

Saves a new domain class instance or updates a modified persistent instance in the database, cascading updates to child instances if required.

h2. Examples

{code:java}
def b = new Book(title: "The Shining")
b.save()
{code}

h2. Description

The @save@ method informs the persistence context that an instance should be saved or updated. The object will not be persisted immediately unless the @flush@ argument is used:

{code:java}
b.save(flush: true)
{code}

The @save@ method returns @null@ if [validation|guide:validation] failed and the instance was not persisted, or the instance itself if successful. This lets you use "Groovy truth" (@null@ is considered @false@) to write code like the following:

{code:java}
if (!b.save()) {
    b.errors.allErrors.each {
        println it
    }
}
{code}

Parameters:

* @validate@ (optional) - Set to @false@ if validation should be skipped
* @flush@ (optional) - When set to @true@ flushes the persistence context, persisting the object immediately and updating the @version@ column for [optimistic locking|guide:locking]
* @insert@ (optional) - When set to @true@ will force Hibernate to do a SQL INSERT; this is useful in certain situations (for example when using assigned ids) and Hibernate cannot detect whether to do an INSERT or an UPDATE
* @failOnError@ (optional) - When set to @true@ the @save@ method with throw a @grails.validation.ValidationException@ if [validation|guide:validation] fails. This behavior may also be triggered by setting the @grails.gorm.failOnError@ property in @grails-app/conf/application.groovy@. If the Config property is set and the argument is passed to the method, the method argument will always take precedence.  For more details about the config property and other GORM config options, see the [GORM Configuration Options|guide:configGORM] section of The User Guide.
* @deepValidate@ (optional) - Determines whether associations of the domain instance should also be validated, i.e. whether validation cascades. This is @true@ by default - set to @false@ to disable cascading validation.

{note}
By default GORM classes are configured for [optimistic locking|guide:locking], which is a feature of Hibernate that involves storing an incrementing version in the table. This value is only updated in the database when the Hibernate session is flushed.
{note}
