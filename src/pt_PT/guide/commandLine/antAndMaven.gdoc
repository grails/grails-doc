{hidden}
If all the other projects in your team or company are built using a standard build tool such as Ant or Maven, you become the black sheep of the family when you use the Grails command line to build your application. Fortunately, you can easily integrate the Grails build system into the main build tools in use today (well, the ones in use in Java projects at least).
{hidden}
Se todos os outros projetos da tua equipa ou companhia são construídos usando uma ferramenta de construção padronizada como, por exemplo, Ant ou Maven, tu transformas-te na ovelha negra da família quando utilizas a linha de comando Grails para construir a tua aplicação. Felizmente, podes integrar facilmente o sistema de construção Grails nas principais ferramentas de construção em uso hoje em dia (wbem, pelo menos nas que são utilizadas em projetos Java).

{hidden}
h3. Ant Integration
{hidden}
h3. Integração Ant

{hidden}
When you create a Grails application with the [create-app|commandLine] command, Grails doesn't automatically create an Ant @build.xml@ file but you can generate one with the [integrate-with|commandLine] command:
{hidden}
Quando crias uma aplicação Grails com o comando [create-app|commandLine], Grails não cria automaticamente um ficheiro de construção Ant @build.xml@ mas podes gerar um com o comando [integrate-with|commandLine]:

bc.
grails integrate-with --ant

{hidden}
This creates a @build.xml@ file containing the following targets:

* @clean@ - Cleans the Grails application
* @compile@ - Compiles your application's source code
* @test@ - Runs the unit tests
* @run@ - Equivalent to "grails run-app"
* @war@ - Creates a WAR file
* @deploy@ - Empty by default, but can be used to implement automatic deployment

Each of these can be run by Ant, for example:
{hidden}
Isto cria um ficheiro @build.xml@ contendo os seguintes alvos:

* @clean@ - Limpa a aplicação Grails
* @compile@ - Compila o código-fonte da aplicação
* @test@ - Corre os teste de unidade
* @run@ - Equivalente a "grails run-app"
* @war@ - Cria o ficheiro WAR
* @deploy@ - Vazio por defeito, mas pode ser utilizado para implementar o "deploy" automático

Cada um destes podem ser corridos por Ant, por exemplo:

{code:java}
ant war
{code}

{hidden}
The build file is configured to use "Apache Ivy":http://ant.apache.org/ivy/ for dependency management, which means that it will automatically download all the requisite Grails JAR files and other dependencies on demand. You don't even have to install Grails locally to use it! That makes it particularly useful for continuous integration systems such as [CruiseControl|http://cruisecontrol.sourceforge.net/] or [Jenkins|http://jenkins-ci.org/].

It uses the Grails [Ant task|api:grails.ant.GrailsTask] to hook into the existing Grails build system. The task lets you run any Grails script that's available, not just the ones used by the generated build file. To use the task, you must first declare it:
{hidden}
O ficheiro de construção é configurado para utilizar "Apache Ivy":http://ant.apache.org/ivy/ para a gestão de dependências, o que significa que irá descarregar automaticamente todos os ficheiros JAR Grails e outras dependências quando for necessário. Não tens sequer que instalar Grails localmente para o poder usar ! Isto torna-o particularmente útil para sistemas de integração contínua tais como [CruiseControl|http://cruisecontrol.sourceforge.net/] ou [Jenkins|http://jenkins-ci.org/].

Utiliza a [Ant task|api:grails.ant.GrailsTask] Grails para se ligar ao sistema de construção Grails existente. A tarefa permite-te correr qualquer script Grails que esteja disponível, não apenas aqueles que são utilizados pelo ficheiro de construção gerado. Para utilizar a tarefa deves primeiro declará-la:
{code}
<taskdef name="grailsTask"
         classname="grails.ant.GrailsTask"
         classpathref="grails.classpath"/>
{code}

{hidden}
This raises the question: what should be in "grails.classpath"? The task itself is in the "grails-bootstrap" JAR artifact, so that needs to be on the classpath at least. You should also include the "groovy-all" JAR. With the task defined, you just need to use it! The following table shows you what attributes are available:
{table}
 Attribute | Description | Required
 home | The location of the Grails installation directory to use for the build. | Yes, unless classpath is specified.- classpathref | Classpath to load Grails from. Must include the "grails-bootstrap" artifact and should include "grails-scripts". | Yes, unless @home@ is set or you use a @classpath@ element.
 script | The name of the Grails script to run, e.g. "TestApp". | Yes.
 args | The arguments to pass to the script, e.g. "-unit -xml". | No. Defaults to "".
 environment | The Grails environment to run the script in. | No. Defaults to the script default.- includeRuntimeClasspath | Advanced setting: adds the application's runtime classpath to the build classpath if true. | No. Defaults to @true@.
{table}
{hidden}
Isto levanta a questão: o que deve estar no "grails.classpath"? A tarefa propriamente dita está no artefato JAR "grails-bootstrap", por isso precisa, pelo menos, de estar no classpath. Deve também incluir o JAR "groovy-all". Com a tarefa definida, apenas precisa utilizá-la! A tabela seguinte mostra os atributos que estão disponíveis:
{table}
 Atributo | Descrição | Necessário
 home | Localização do diretório de instalação de Grails para usar na construção. | Sim, a não ser que seja especificado o classpath.
 classpathref | Classpath a partir do qual carregar Grails. Deve incluir o artefato "grails-bootstrap" e deve incluir "grails-scripts". | Sim, a menos que @home@ esteja definido ou utilizes um elemento @classpath@ .
 script | O nome do script Grails a correr, ex. "TestApp". | Sim.
 args | Os argumentas a passar para script, ex. "-unit -xml". | Não. Por defeito "".
 environment | O ambiente Grails em que o script deve correr. | Não. Valor por defeito igual ao do script.
 includeRuntimeClasspath | Configuração avançada: Se true adiciona o classpath de tempo de execução da aplicação ao classpath de construção. | Não. Por defeito @true@.
{table}

{hidden}
The task also supports the following nested elements, all of which are standard Ant path structures:

* @classpath@ - The build classpath (used to load Gant and the Grails scripts).
* @compileClasspath@ - Classpath used to compile the application's classes.
* @runtimeClasspath@ - Classpath used to run the application and package the WAR. Typically includes everything in @compileClasspath.
* @testClasspath@ - Classpath used to compile and run the tests. Typically includes everything in @runtimeClasspath@.
{hidden}
A tarefa também suporta os seguintes elementos aninhados, todos eles estruturas de caminho Ant padrão:

* @classpath@ - O classpath de construção(utilizado para caregar os scripts Gant e Grails).
* @compileClasspath@ - Classpath utilizado para compilar as classes da aplicação.
* @runtimeClasspath@ - Classpath utilizado para correr a aplicação e empacotar o WAR. Tipicamente inclui tudo em @compileClasspath.
* @testClasspath@ - Classpath utilizado para compilar e correr os testes. Tipicamente inclui tudo em  @runtimeClasspath@.

{hidden}
How you populate these paths is up to you. If you use the @home@ attribute and put your own dependencies in the @lib@ directory, then you don't even need to use any of them. For an example of their use, take a look at the generated Ant build file for new apps.
{hidden}
A forma de popular estes caminhos cabe a cada um. Se utiliza o atributo @home@ e coloca as suas próprias dependências na directoria @lib@, então nem precisa utilizar nenhum deles. Para um exemplo da sua utilização, veja o ficheiro de construção Ant gerado para novas aplicações.

{hidden}
h3. Maven Integration
{hidden}
h3. Integração Maven

{hidden}
Grails provides integration with "Maven 2":http://maven.apache.org with a Maven plugin. The current Maven plugin is based on but supersedes the version created by [Octo|http://forge.octo.com/], who did a great job with the original.
{hidden}
Grails fornece integração com "Maven 2":http://maven.apache.org através de um plugin Maven. O plugin Maven atual é baseado (mas acrescenta) na versãocriada por [Octo|http://forge.octo.com/], que fez um excelente trabalho com o original.

{hidden}
h4. Preparation

In order to use the new plugin, all you need is Maven 2 installed and set up. This is because *you no longer need to install Grails separately to use it with Maven!*

{note}
The Maven 2 integration for Grails has been designed and tested for Maven 2.0.9 and above. It will not work with earlier versions.
{note}

{note}
The default mvn setup DOES NOT supply sufficient memory to run the Grails environment. We recommend that you add the following environment variable setting to prevent poor performance:
{note}
{hidden}
h4. Preparação

Para poder utilizar o novo plugin, tudo o que necessita é ter Maven 2 instalado e configurado. Isto porque *já não necessita instalar Grails separadamente para utilizá-lo com Maven!*

{note}
A integração Maven 2 para Grails foi desenhada e testada para Maven 2.0.9 e mais recentes. Não irá funcionar em versões mais antigas.
{note}

{note}
A configuração mvn por defeito NÃO fornece memória suficiente para correr o ambiente Grails. Recomendamos que adicione a seguinte configuração de variável de ambiente para evitar um mau desempenho:

@export MAVEN_OPTS="-Xmx512m -XX:MaxPermSize=256"@
{note}

{hidden}
h4. Creating a Grails Maven Project

To create a Mavenized Grails project simply run the following command:
{hidden}
h4. Criando um Projeto Maven Grails

Para criar um projeto Grails Mavenizedo basta executar o comando seguinte:

{code}
mvn archetype:generate -DarchetypeGroupId=org.grails \\\
    -DarchetypeArtifactId=grails-maven-archetype \\\
    -DarchetypeVersion=1.3.2 \\\
    -DgroupId=example -DartifactId=my-app
{code}

{hidden}
Choose whichever grails version, group ID and artifact ID you want for your application, but everything else must be as written. This will create a new Maven project with a POM and a couple of other files. What you won't see is anything that looks like a Grails application. So, the next step is to create the project structure that you're used to.
But first, to set target JDK to Java 6, do that now. Open my-app/pom.xml and change
{hidden}
Escolha uma qualquer versão de grails, ID de grupo e ID de artefato que deseje para a sua aplicação, mas tudo o resto deve ficar como está escrito. Isto irá criar um novo projeto Maven com um POM e alguns outros ficheiros. Aquilo que não verá é algo que se assemelhe a uma aplicação Grails. Por isso, o próximo passo é criar a estrutura de projeto a que está habituado.
Mas primeiro, há que configurar o JDK alvo para Java 6, vamos fazê-lo agora. Abra my-app/pom.xml e mude
{code}
<plugin>
  <artifactId>maven-compiler-plugin</artifactId>
  <configuration>
    <source>1.5</source>
    <target>1.5</target>
  </configuration>
</plugin>
{code}
{hidden}
to
{hidden}
para
{code}
<plugin>
  <artifactId>maven-compiler-plugin</artifactId>
  <configuration>
    <source>1.6</source>
    <target>1.6</target>
  </configuration>
</plugin>
{code}

{hidden}
Then you're ready to create the project structure:
{hidden}
Então estará pronto para criar a estrutura do projeto:

{code}
cd my-app
mvn initialize
{code}

{note}
{hidden}
if you see a message similar to this:
{hidden}
se vir uma mensagem semelhante a esta:

{code}
Resolving plugin JAR dependencies ...
:: problems summary ::
:::: WARNINGS
        module not found: org.hibernate#hibernate-core;3.3.1.GA
{code}

{hidden}
you need to add the plugins manually to application.properties:
{hidden}
necessita adicionar os plugins manualmente a application.properties:

{code}
plugins.hibernate=2.0.0
plugins.tomcat=2.0.0
{code}

{hidden}
then run
{hidden}
então execute

{code}
mvn compile
{code}

{hidden}
and the hibernate and tomcat plugins will be installed.
{hidden}
e os plugins hibernate e tomcat serão instalados.
{note}
{hidden}
Now you have a Grails application all ready to go. The plugin integrates into the standard build cycle, so you can use the standard Maven phases to build and package your app:  @mvn clean@ ,  @mvn compile@ ,  @mvn test@ ,  @mvn package@ , @mvn install@ .
{hidden}

Agora já tem uma aplicação Grails pronta a executar. O plugin integra-se no ciclo de construção standard, por isso pode utilizar as fases standard de Maven para construir e empacotar a sua aplicação:  @mvn clean@ ,  @mvn compile@ ,  @mvn test@ ,  @mvn package@ , @mvn install@ .

{hidden}
You can also use some of the Grails commands that have been wrapped as Maven goals:
 
* @grails:create-controller@ - Calls the [create-controller|commandLine] command
* @grails:create-domain-class@ - Calls the [create-domain-class|commandLine] command
* @grails:create-integration-test@ - Calls the [create-integration-test|commandLine] command
* @grails:create-pom@ - Creates a new Maven POM for an existing Grails project
* @grails:create-script@ - Calls the [create-script|commandLine] command
* @grails:create-service@ - Calls the [create-service|commandLine] command
* @grails:create-taglib@ - Calls the [create-taglib|commandLine] command
* @grails:create-unit-test@ - Calls the [create-unit-test|commandLine] command
* @grails:exec@ - Executes an arbitrary Grails command line script
* @grails:generate-all@ - Calls the [generate-all|commandLine] command
* @grails:generate-controller@  - Calls the [generate-controller|commandLine] command
* @grails:generate-views@ - Calls the [generate-views|commandLine] command
* @grails:install-plugin@ - Calls the [install-plugin|commandLine] command
* @grails:install-templates@ - Calls the [install-templates|commandLine] command
* @grails:list-plugins@ - Calls the [list-plugins|commandLine] command
* @grails:package@ - Calls the [package|commandLine] command
* @grails:run-app@ - Calls the [run-app|commandLine] command
* @grails:uninstall-plugin@ - Calls the [uninstall-plugin|commandLine] command
{hidden}

Também pode utiizar alguns dos comandos Grails que foram embrulhados como metas Maven:

* @grails:create-controller@ - Chama o comando [create-controller|commandLine]
* @grails:create-domain-class@ - Chama o comando [create-domain-class|commandLine]
* @grails:create-integration-test@ - Chama o comando [create-integration-test|commandLine]
* @grails:create-pom@ - Cria um novo POM Maven para um projeto Grails existente
* @grails:create-script@ - Chama o comando [create-script|commandLine]
* @grails:create-service@ - Chama o comando [create-service|commandLine]
* @grails:create-taglib@ - Chama o comando [create-taglib|commandLine]
* @grails:create-unit-test@ - Chama o comando [create-unit-test|commandLine]
* @grails:exec@ - Executa um script de linha de comando Grails arbitrário
* @grails:generate-all@ - Chama o comando [generate-all|commandLine]
* @grails:generate-controller@  - Chama o comando [generate-controller|commandLine]
* @grails:generate-views@ - Chama o comando [generate-views|commandLine]
* @grails:install-plugin@ - Chama o comando [install-plugin|commandLine]
* @grails:install-templates@ - Chama o comando [install-templates|commandLine]
* @grails:list-plugins@ - Chama o comando [list-plugins|commandLine]
* @grails:package@ - Chama o comando [package|commandLine]
* @grails:run-app@ - Chama o comando [run-app|commandLine]
* @grails:uninstall-plugin@ - Chama o comando [uninstall-plugin|commandLine]

{hidden}
For a complete, up to date list, run @mvn grails:help@
{hidden}

Para uma lista, completa e atualizada, execute @mvn grails:help@

{hidden}
h4. Mavenizing an existing project
{hidden}

h4. Mavenizando um projeto existente

{hidden}
Creating a new project is great way to start, but what if you already have one? You don't want to create a new project and then copy the contents of the old one over. The solution is to create a POM for the existing project using this Maven command (substitute the version number with the grails version of your existing project):
{hidden}

Criar um novo projeto é uma ótima maneira de começar, mas e se já tiver um projeto? Não vai querer criar um novo projeto e depois copiar o conteúdo do antigo para o recém criado. A solução é criar um POM para o projeto existente utilizando este comando Maven (substitua o número da versãopelo da versão de grails do seu projeto existente):
{code}
mvn org.grails:grails-maven-plugin:1.3.2:create-pom -DgroupId=com.mycompany
{code}
{hidden}
When this command has finished, you can immediately start using the standard phases, such as @mvn package@. Note that you have to specify a group ID when creating the POM.

You may also want to set target JDK to Java 6; see above.
{hidden}

Quando este comando terminar, pode começar a utilizar as fases standard imediatamente, tais como @mvn package@. Note que deve especificar um ID de grupo quando criar o POM.

Também pode desejar definir o JDK alvo para Java 6; ver acima.

{hidden}
h4. Adding Grails commands to phases
{hidden}
h4. Adicionando comandos Grails às fases

{hidden}
The standard POM created for you by Grails already attaches the appropriate core Grails commands to their corresponding build phases, so "compile" goes in the "compile" phase and "war" goes in the "package" phase. That doesn't help though when you want to attach a plugin's command to a particular phase. The classic example is functional tests. How do you make sure that your functional tests (using which ever plugin you have decided on) are run during the "integration-test" phase?
{hidden}
O POM standard criado para si por Grails já anexa os comandos principais de Grails apropriados às suas fases de construção correspondentes, assim sendo "compile" está na fase "compile" e "war" está na fase "package". No entanto isto não ajuda quando quer juntar o comando de um plugin a uma fase em particular. O exemplo clássico é o dos testes funcionais. Como garantir que os seus testes funcionais (usando um qualquer plugin pelo qual se tenha decidido) correm durante a fase "integration-test"?

{hidden}
Fear not: all things are possible. In this case, you can associate the command to a phase using an extra "execution" block:
{hidden}
Não tenha receio: tudo é possível. Neste caso, pode associar o comando a uma fase utilizando um bloco de "execução" extra:
{code:xml}
<plugin>
    <groupId>org.grails</groupId>
    <artifactId>grails-maven-plugin</artifactId>
    <version>1.3.2</version>
    <extensions>true</extensions>
    <executions>
        <execution>
            <goals>
            ...
            </goals>
        </execution>
        <!-- Add the "functional-tests" command to the "integration-test" phase -->
        <execution>
            <id>functional-tests</id>
            <phase>integration-test</phase>
            <goals>
                <goal>exec</goal>
            </goals>
            <configuration>
                <command>functional-tests</command>
            </configuration>
        </execution>
    </executions>
</plugin>
{code}

{hidden}
This also demonstrates the @grails:exec@ goal, which can be used to run any Grails command. Simply pass the name of the command as the @command@ system property, and optionally specify the arguments with the @args@ property:
{hidden}
Isto também demonstra a meta @grails:exec@, que pode ser utilizado para executar qualquer comando Grails. Passe simplesmente o nome do comando como a propriedade de sistema @command@, e opcionalmente especifique os argumentos com a propriedade @args@:
{code}
mvn grails:exec -Dcommand=create-webtest -Dargs=Book
{code}

{hidden}
h4. Debugging a Grails Maven Project
{hidden}
h4. Debugging de um Projeto Maven Grails

{hidden}
Maven can be launched in debug mode using the "mvnDebug" command. To launch your Grails application in debug, simply run:
{hidden}
Maven pode ser lançado em modo debug utilizando o comando "mvnDebug". Para lançar a sua aplicação Grails em debug, execute simplesmente:

{code}
mvnDebug grails:run-app
{code}

{hidden}
The process will be suspended on startup and listening for a debugger on port 8000.

If you need more control of the debugger, this can be specified using the MAVEN_OPTS environment variable, and launch Maven with the default "mvn" command:
{hidden}
O processo será suspenso no começo e ficará a escutar um debugger no port0 8000.

Se necessita de mais controlo sobre o debugger, isso pode ser especificado utilizando a variável de ambiente MAVEN_OPTS, e lançando Maven com o comando por defeito "mvn":

{code}
MAVEN_OPTS="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"
mvn grails:run-app
{code}

{hidden}
h4. Raising issues
{hidden}
h4. Levantando questões

{hidden}
If you come across any problems with the Maven integration, please raise a JIRA issue as a sub-task of [MAVEN-30|https://jira.grails.org/browse/MAVEN-30].
{hidden}
Se encontar algum problema durante a integração Maven, por favor levante uma questão JIRA como uma sub-tarefa de [MAVEN-30|https://jira.grails.org/browse/MAVEN-30].
