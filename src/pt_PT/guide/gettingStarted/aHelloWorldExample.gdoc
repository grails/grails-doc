To implement the typical "hello world!" example @cd@ into the "helloworld" directory created in the previous section and activate interactive mode:

{code}
$ cd helloworld
$ grails
{code}

Grails' interactive mode will be activated and you should see a prompt that looks like the following:

!interactive-helloworld.png!

Now run the [create-controller|commandLine] command:

{code}
grails> create-controller hello
{code}

This will create a new controller (Refer to the section on [Controllers|guide:controllers] for more information) in the @grails-app/controllers@ directory called @helloworld/HelloController.groovy@.

{note}
If no package is specified with create-controller script, Grails automatically uses the application name as the package name. This default is configurable with the @grails.project.groupId@ attribute in Config.groovy.
{note}

Controllers are capable of dealing with web requests and to fulfil the "hello world!" use case our implementation needs to look like the following:

{code:java}
package helloworld

class HelloController {

    def world() {
        render "Hello World!"
    }
}
{code}

Job done. Now start-up the container with another new command called [run-app|commandLine]:

{code}
grails> run-app
{code}

This will start-up a server on port 8080 and you should now be able to access your application with the URL: @http://localhost:8080/helloworld@

The result will look something like the following screenshot:

!intropage.png!

This is the Grails intro page which is rendered by the @web-app/index.gsp@ file. You will note it has a detected the presence of your controller and clicking on the link to our controller we can see the text "Hello World!" printed to the browser window.

