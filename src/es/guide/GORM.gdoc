{hidden}
Domain classes are core to any business application. They hold state about business processes and hopefully also implement behavior. They are linked together through relationships; one-to-one, one-to-many, or many-to-many.
{hidden}
Las clases de dominio son fundamentales para cualquier aplicación de negocios. Representan el estado de los procesos del negocio y es de esperar que también implementen el comportamiento. Están vinculadas entre si mediante relaciones: uno-a-uno, uno-a-varios o varios-a-varios.

{hidden}
GORM is Grails' object relational mapping (ORM) implementation. Under the hood it uses Hibernate 3 (a very popular and flexible open source ORM solution) and thanks to the dynamic nature of Groovy with its static and dynamic typing, along with the convention of Grails, there is far less configuration involved in creating Grails domain classes.
{hidden}
GORM es la implementación del mapeo objeto-relacional (ORM por sus siglas en ingles) de Grails. Internamente se utiliza Hibernate 3 (una solución ORM de código abierto muy popular y flexible) que gracias a la naturaleza dinámica de Groovy con su tipado estático y dinámico, además de la convención empleada por Grails, requiere un mínimo de configuración en la creación de las clases de dominio de Grails. 

{hidden}
You can also write Grails domain classes in Java. See the section on Hibernate Integration for how to write domain classes in Java but still use dynamic persistent methods. Below is a preview of GORM in action:
{hidden}
También es posible escribir las clases de dominio de Grails utilizando Java. Consulte la sección sobre Integración con Hibernate para mas información acerca de como escribir las clases en Java sin perder los métodos dinámicos de persistencia. A continuación un ejemplo de GORM en acción:

{code}
def book = Book.findByTitle("Groovy in Action")

book
  .addToAuthors(name:"Dierk Koenig")
  .addToAuthors(name:"Guillaume LaForge")
  .save()
{code}
