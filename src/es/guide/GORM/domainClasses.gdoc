{hidden}
When building Grails applications you have to consider the problem domain you are trying to solve. For example if you were building an [Amazon|http://www.amazon.com/]-style bookstore you would be thinking about books, authors, customers and publishers to name a few.
{hidden}
Al crear aplicaciones Grails usted tiene que considerar el dominio del problema que está tratando de resolver. Por ejemplo, si estuviera construyendo una librería al estilo de [Amazon|http://www.amazon.com/] estaría pensando en libros, autores, clientes y editores solo por nombrar algunos.

{hidden}
These are modeled in GORM as Groovy classes, so a @Book@ class may have a title, a release date, an ISBN number and so on. The next few sections show how to model the domain in GORM.
{hidden}
Estos se modelan en GORM como clases Groovy, por lo que una clase @Book@ puede tener un título, una fecha de publicación, un número de ISBN y así sucesivamente. Las siguientes secciones muestran cómo modelar el dominio en GORM. 

{hidden}
To create a domain class you run the [create-domain-class|commandLine] command as follows:
{hidden}
Para crear una clase de dominio ejecute el comando [create-domain-class|commandLine] de la siguiente manera: 

{code}
grails create-domain-class org.bookstore.Book
{code}

{hidden}
The result will be a class at @grails-app/domain/org/bookstore/Book.groovy@:
{hidden}
El resultado será una clase en @grails-app/domain/org/bookstore/Book.groovy@:

{code}
package org.bookstore

class Book {
}
{code}

{hidden}
This class will map automatically to a table in the database called @book@ (the same name as the class). This behaviour is customizable through the [ORM Domain Specific Language|guide:ormdsl]
{hidden}
A esta clase se corresponde automáticamente una tabla en la base de datos llamada @book@ (el mismo nombre que la clase). Este comportamiento puede modificarse a través del [Lenguaje específico del dominio (DSL por sus siglas en ingles) ORM|guide:ormdsl]

{hidden}
Now that you have a domain class you can define its properties as Java types. For example:
{hidden}
Ahora que tiene una clase de dominio usted puede definir sus propiedades como tipos de Java. Por ejemplo: 

{code}
package org.bookstore

class Book {
    String title
    Date releaseDate
    String ISBN
}
{code}

{hidden}
Each property is mapped to a column in the database, where the convention for column names is all lower case separated by underscores. For example @releaseDate@ maps onto a column @release_date@. The SQL types are auto-detected from the Java types, but can be customized with [Constraints|guide:constraints] or the [ORM DSL|guide:ormdsl].
{hidden}
A cada propiedad se asigna una columna en la base de datos, la convención para nombrar las columnas es utilizar letras minúsculas separadas por guiones bajos. Por ejemplo @releaseDate@ se asigna a una columna @release_date@. Los tipos de SQL se detectan de forma automática a partir de los tipos de Java, pero pueden ser modificados mediante el uso de [Constraints|guide:constraints] o el [ORM DSL|guide:ormdsl].
