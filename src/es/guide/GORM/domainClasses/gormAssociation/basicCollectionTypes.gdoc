{hidden}
As well as associations between different domain classes, GORM also supports mapping of basic collection types.
For example, the following class creates a @nicknames@ association that is a @Set@ of @String@ instances:
{hidden}
Al igual que con las asociaciones entre diferentes tipos de clases de dominio, GORM también es compatible con el mapeo de colecciones de tipos básicos. Por ejemplo, la clase siguiente, crea una asociación de @nicknames@ que es un @Set@ de instancias @String@:

{code:java}
class Person {
    static hasMany = [nicknames: String]
}
{code}

{hidden}
GORM will map an association like the above using a join table. You can alter various aspects of how the join table is mapped using the @joinTable@ argument:
{hidden}
GORM mapeara esta asociación utilizando una tabla de unión. Usted puede modificar varios aspectos del mapeo de la tabla de unión mediante el argumento @joinTable@:

{code:java}
class Person {

    static hasMany = [nicknames: String]

    static mapping = {
       hasMany joinTable: [name: 'bunch_o_nicknames',
                           key: 'person_id',
                           column: 'nickname',
                           type: "text"]
    }
}
{code}

{hidden}
The example above will map to a table that looks like the following:
{hidden}
Al ejemplo anterior corresponderá una tabla como la siguiente:

{hidden}
*bunch_o_nicknames Table*
{hidden}
*Tabla bunch_o_nicknames*
{code:java}
---------------------------------------------
| person_id         |     nickname          |
---------------------------------------------
|   1               |      Fred             |
---------------------------------------------
{code}
