h1. id

h2. Purpose

Customizes the way the identifier for a domain class is generated

h2. Examples

{code:java}
class Book {
    static mapping = {
        id generator: 'hilo',
           params: [table: 'hi_value', column: 'next_value', max_lo: 100]
    }
}
{code}

h2. Description

Usage: @id(map)@

Arguments:

* @generator@ (optional) - The name of the generator to use. Can be @increment@, @identity@, @sequence@, @hilo@, @seqhilo@, @uuid@, @guid@, @native@, @assigned@, @select@, @foreign@ or @sequence-identity@. See [Hibernate reference documentation|http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html/mapping.html#mapping-declaration-id-generator] for more information.
* @composite@ (optional) - Takes a list of property names to use that form the composite identifier
* @name@ (optional) - The property name to use as the identifier
* @params@ (optional) - Any parameters to pass to the defined identity generator
* @column@ (optional) - The column name to map the identifier to. The remaining [column|databaseMapping] definition properties are also available.

By default GORM uses the native strategy to generate a database identifier for each entity (typically an auto-incrementing column or a sequence). You can alter this with the @id@ methods @generator@ argument:

{code}
static mapping = {
    id generator: 'hilo',
       params: [table: 'hi_value', column: 'next_value', max_lo: 100]
}
{code}

You can also use the method to define a composite identifier:

{code}
static mapping = {
    id composite: ['title', 'author']
}
{code}

or change the name of the property that defines the identifier:

{code}
static mapping = {
    id name: 'title'
}
{code}

You can also alter the column definition:

{code}
static mapping = {
    id column: 'book_id', type: 'integer'
}
{code}

See the section on [Custom Database Identity|guide:identity] in the user guide for more information.
