来尝试一些基本的CRUD(Create/Read/Update/Delete)操作。

h4. 建立 create

建立一个领域类数据通过领域类中的Map结构映射到它的属性，并通过 [save|domainClasses] 方法建立的：

{code}
def p = new Person(name: "Fred", age: 40, lastVisit: new Date())
p.save()
{code}

[save|domainClasses] 方法将你的类传入到 Hibernate ORM层。

h4. 读 Read

Grails总是为你的领域类加入 @id@ 属性，让你来获取这个数据：

{code}
def p = Person.get(1)
assert 1 == p.id
{code}

这里使用 [get|domainClasses] 方法，从数据库中将 @Person@ 对象调用出来。

你可以通过只读模式 [read|domainClasses] 方法将对象读出：

{code:java}
def p = Person.read(1)
{code}

Hibernate引擎不会对对象做 ‘脏检查’ 和 持久化。注意，如果你显式调用[save|domainClasses]方法，那么该对象被放回读写状态。

此外，你可以通过[load|domainClasses]方法为一个实例做一个调用代理：

{code:java}
def p = Person.load(1)
{code}

这个方法不会马上执行数据连接，直到你使用 getId() 。Hibernate 只是初始化实例的接口，除非没有找到这个实例id它才会报错。

h4. 更新 Update

更新一个实例，修改属性后，再使用 [save|domainClasses]:

{code}
def p = Person.get(1)
p.name = "Bob"
p.save()
{code}

h4. 删除 Delete

要删除一个实例，使用[delete|domainClasses]方法：

{code}
def p = Person.get(1)
p.delete()
{code}
