GORM supports a number of powerful ways to query from dynamic finders, to criteria to Hibernate's object oriented query language HQL. Depending on the complexity of the query you have the following options in order of flexibility and power:

* Dynamic Finders
* Where Queries
* Criteria Queries
* Hibernate Query Language (HQL)

In addition, Groovy's ability to manipulate collections with "GPath":http://groovy.codehaus.org/GPath and methods like sort, findAll and so on combined with GORM results in a powerful combination.

However, let's start with the basics.

h4. Listing instances

Use the [list|domainClasses] method to obtain all instances of a given class:

{code}
def books = Book.list()
{code}

The [list|domainClasses] method supports arguments to perform pagination:

{code}
def books = Book.list(offset:10, max:20)
{code}

as well as sorting:

{code}
def books = Book.list(sort:"title", order:"asc")
{code}

Here, the @sort@ argument is the name of the domain class property that you wish to sort on, and the @order@ argument is either @asc@ for *asc*ending or @desc@ for *desc*ending.

h4. Retrieval by Database  Identifier

The second basic form of retrieval is by database identifier using the [get|domainClasses] method:

{code}
def book = Book.get(23)
{code}

You can also obtain a list of instances for a set of identifiers using [getAll|domainClasses]:

{code}
def books = Book.getAll(23, 93, 81)
{code}
