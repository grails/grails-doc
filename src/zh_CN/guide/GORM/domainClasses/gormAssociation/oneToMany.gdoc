A one-to-many relationship is when one class, example @Author@, has many instances of another class, example @Book@. With Grails you define such a relationship with the @hasMany@ setting:

{code}
class Author {
    static hasMany = [books: Book]

    String name
}
{code}

{code}
class Book {
    String title
}
{code}

In this case we have a unidirectional one-to-many. Grails will, by default, map this kind of relationship with a join table.

{note}
The [ORM DSL|guide:ormdsl] allows mapping unidirectional relationships using a foreign key association instead
{note}

Grails will automatically inject a property of type @java.util.Set@ into the domain class based on the @hasMany@ setting. This can be used to iterate over the collection:

{code}
def a = Author.get(1)

for (book in a.books) {
    println book.title
}
{code}

{note}
The default fetch strategy used by Grails is "lazy", which means that the collection will be lazily initialized on first access. This can lead to the [n+1 problem|http://www.javalobby.org/java/forums/t20533.html] if you are not careful.

If you need "eager" fetching you can use the [ORM DSL|guide:ormdsl] or specify eager fetching as part of a [query|guide:querying]
{note}

The default cascading behaviour is to cascade saves and updates, but not deletes unless a @belongsTo@ is also specified:

{code}
class Author {
    static hasMany = [books: Book]

    String name
}
{code}

{code}
class Book {
    static belongsTo = [author: Author]
    String title
}
{code}

If you have two properties of the same type on the many side of a one-to-many you have to use @mappedBy@ to specify which the collection is mapped:

{code}
class Airport {
    static hasMany = [flights: Flight]
    static mappedBy = [flights: "departureAirport"]
}
{code}

{code}
class Flight {
    Airport departureAirport
    Airport destinationAirport
}
{code}

This is also true if you have multiple collections that map to different properties on the many side:

{code}
class Airport {
    static hasMany = [outboundFlights: Flight, inboundFlights: Flight]
    static mappedBy = [outboundFlights: "departureAirport",
                       inboundFlights: "destinationAirport"]
}
{code}

{code}
class Flight {
    Airport departureAirport
    Airport destinationAirport
}
{code}

