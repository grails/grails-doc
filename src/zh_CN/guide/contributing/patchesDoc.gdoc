{hidden}
Contributing to the documentation is simpler for the core framework because there is a public fork of the [http://github.com/grails/grails-doc|http://github.com/grails/grails-doc] project that anyone can request commit access to. So, if you want to submit patches to the documentation, simply request commit access to the following repository [http://github.com/pledbrook/grails-doc|http://github.com/pledbrook/grails-doc] by sending a GitHub message to 'pledbrook' and then commit your patches just as you would to any other GitHub repository.

h3. Building the Guide

To build the documentation, simply type:
{code}
./gradlew docs
{code}

Be warned: this command can take a while to complete and you should probably increase your Gradle memory settings by giving the @GRADLE_OPTS@ environment variable a value like
{code}
export GRADLE_OPTS="-Xmx512m -XX:MaxPermSize=384m"
{code}

Fortunately, you can reduce the overall build time with a couple of useful options. The first allows you to specify the location of the Grails source to use:

{code}
./gradlew -Dgrails.home=/home/user/projects/grails-core docs 
{code}

The Grails source is required because the guide links to its API documentation and the build needs to ensure it's generated. If you don't specify a @grails.home@ property, then the build will fetch the Grails source - a download of 10s of megabytes. It must then compile the Grails source which can take a while too.

Additionally you can create a local.properties file with this variable set:
{code}
grails.home=/home/user/projects/grails-core
{code}
or
{code}
grails.home=../grails-core
{code}

The other useful option allows you to disable the generation of the API documentation, since you only need to do it once:
{code}
./gradlew -Ddisable.groovydocs=true docs
{code}

Again, this can save a significant amount of time and memory.

The main English user guide is generated in the @build/docs@ directory, with the @guide@ sub-directory containing the user guide part and the @ref@ folder containing the reference material. To view the user guide, simply open @build/docs/index.html@.

h3. Publishing

The publishing system for the user guide is the same as [the one for Grails projects|http://grails.org/doc/2.0.0.M1/guide/conf.html#docengine]. You write your chapters and sections in the gdoc wiki format which is then converted to HTML for the final guide. Each chapter is a top-level gdoc file in the @src/<lang>/guide@ directory. Sections and sub-sections then go into directories with the same name as the chapter gdoc but without the suffix.

The structure of the user guide is defined in the @src/<lang>/guide/toc.yml@ file, which is a YAML file. This file also defines the (language-specific) section titles. If you add or remove a gdoc file, you must update the TOC as well!

The @src/<lang>/ref@ directory contains the source for the reference sidebar. Each directory is the name of a category, which also appears in the docs. Hence the directories need different names for the different languages. Inside the directories go the gdoc files, whose names match the names of the methods, commands, properties or whatever that the files describe.

h3. Translations

This project can host multiple translations of the user guide, with @src/en@ being the main one. To add another one, simply create a new language directory under @src@ and copy into it all the files under @src/en@. The build will take care of the rest.

Once you have a copy of the original guide, you can use the @\{hidden\}@ macro to wrap the English text that you have replaced, rather than remove it. This makes it easier to compare changes to the English guide against your translation. For example:
{code}
\{hidden\}
When you create a Grails application with the [create-app|commandLine] command,
Grails doesn't automatically create an Ant @build.xml@ file but you can generate
one with the [integrate-with|commandLine] command:
\{hidden\}

Quando crias uma aplicação Grails com o comando [create-app|commandLine], Grails
não cria automaticamente um ficheiro de construção Ant @build.xml@ mas podes gerar
um com o comando [integrate-with|commandLine]:
{code}

Because the English text remains in your gdoc files, @diff@ will show differences on the English lines. You can then use the output of @diff@ to see which bits of your translation need updating. On top of that, the @\{hidden\}@ macro ensures that the text inside it is not displayed in the browser, although you can display it by adding this URL as a bookmark: @javascript:toggleHidden();@ (requires you to build the user guide with Grails 2.0 M2 or later).

Even better, you can use the @left_to_do.groovy@ script in the root of the project to see what still needs translating. You run it like so:
{code}
./left_to_do.groovy es
{code}

This will then print out a recursive diff of the given translation against the reference English user guide. Anything in @\{hidden\}@ blocks that hasn't changed since being translated will _not_ appear in the diff output. In other words, all you will see is content that hasn't been translated yet and content that has changed since it was translated. Note that @\{code\}@ blocks are ignored, so you _don't_ need to include them inside @\{hidden\}@ macros.

To provide translations for the headers, such as the user guide title and subtitle, just add language specific entries in the 'resources/doc.properties' file like so:
{code}
es.title=El Grails Framework
es.subtitle=...
{code}

For each language translation, properties beginning @<lang>@. will override the standard ones. In the above example, the user guide title will be El Grails Framework for the Spanish translation. Also, translators can be credited by adding a '<lang>.translators' property:
{code}
fr.translators=Stéphane Maldini
{code}

This should be a comma-separated list of names (or the native language equivalent) and it will be displayed as a "Translated by" header in the user guide itself.

You can build specific translations very easily using the @publishGuide_\*@ and @publishPdf_\*@ tasks. For example, to build both the French HTML and PDF user guides, simply execute
{code}
./gradlew publishPdf_fr
{code}

Each translation is generated in its own directory, so for example the French guide will end up in @build/docs/fr@. You can then view the translated guide by opening @build/docs/<lang>/index.html@.

All translations are created as part of the [Hudson CI build for the grails-doc|http://hudson.grails.org/job/grails_docs_2.0.x/lastSuccessfulBuild/artifact/build/docs/] project, so you can easily see what the current state is without having to build the docs yourself.

{hidden}
对比核心框架对文档做贡献要简单地多，因为有一个[http://github.com/grails/grails-doc|http://github.com/grails/grails-doc]项目，任何人可以请求它的提交权限。如果你想为文档添加补丁，仅需请求[http://github.com/pledbrook/grails-doc|http://github.com/pledbrook/grails-doc]仓库的提交权限，方法是发送GitHub信息给'pledbrook'，然后就可以像你对任何其他仓库所做的一样提交补丁了。

h3. 构建文档

要构建文档，仅需输入：

{code}
./gradlew docs
{code}

注意：这个命令需要一段时间才能完成，并且你可能需要增加你的Gradle内存设置，方法是设置@GRADLE_OPTS@环境变量的值，如下所示：
{code}
export GRADLE_OPTS="-Xmx512m -XX:MaxPermSize=384m"
{code}

幸运的是，你可以使用几个有用的选项减少总的构建时间。第一个选项是允许你指定Grails源代码的位置：

{code}
./gradlew -Dgrails.home=/home/user/projects/grails-core docs 
{code}


之所以要求Grails源代码是因为文档中包含到Grails API文档的链接并且构建过程需要保证生成它们。如果你没有指定@grails.home@属性，那么构建时将会获取Grails的源代码 - 一个几十MB的下载。然后它必须编译Grails的源代码，这也会花一段时间。

此外你可以创建一个local.properties文件，在里面设置这个变量：
{code}
grails.home=/home/user/projects/grails-core
{code}
或
{code}
grails.home=../grails-core
{code}

另一个有用的选项允许你禁用API文档的生成，因为你只需生成一次API文档：
{code}
./gradlew -Ddisable.groovydocs=true docs
{code}

这也会节省大量的时间和内存。

英文的帮助文档生成在@build/docs@下面，其中@guide@子目录包含用户指南部分，@ref@文件夹包含参考资料。要查看帮助文档，只需打开@build/docs/index.html@。

h3. 发布

用于帮助文档的发布系统与[Grails项目使用的|http://grails.org/doc/2.0.0.M1/guide/conf.html#docengine]是相同的。你使用gdoc维基格式编写章节内容，然后转换成最终帮助文档里的HTML。每一章是一个@src/<lang>/guide@目录下的gdoc文件。小节和子小节位于所在章次的gdoc文件名省去后缀为名字的目录中。

用户指南的结构在@src/<lang>/guide/toc.yml@文件中定义，这是个YAML文件。这个文件也定义了章节的（特定语言的）标题。如果你添加或删除gdoc文件，你也必须更新TOC！

@src/<lang>/ref@ 目录包含参考边栏的源代码。每个目录是类别的名字，它也位于docs目录里面。因此这些目录需要对不同的语言使用不同的名字。在这些目录里是gdoc文件，它们的名字匹配方法名、命令名、属性名或这些文件所所描述东西的名字。

h3. 翻译

这个项目容纳了用户指南的多种翻译，@src/en@是主要的语言版本。要添加另一种，仅需在@src@下面创建一个新的语言目录并复制@src/en@下的所有文件到它里面。剩下的事情由构建系统处理。

一旦你有了最初指南的副本，你可以使用@\{hidden\}@来包住你已经替换的英文文本，而不是删除它。这使得对你的翻译与英文指南变动的比较更容易些。例如：

{code}
\{hidden\}
When you create a Grails application with the [create-app|commandLine] command,
Grails doesn't automatically create an Ant @build.xml@ file but you can generate
one with the [integrate-with|commandLine] command:
\{hidden\}

Quando crias uma aplicação Grails com o comando [create-app|commandLine], Grails
não cria automaticamente um ficheiro de construção Ant @build.xml@ mas podes gerar
um com o comando [integrate-with|commandLine]:
{code}

因为英文文本仍旧在gdoc文件中，@diff@将会显示有关英文的不同之处。你然后可以使用@diff@的输出来了解哪些翻译需要更新。在这之上，@\{hidden\}@宏确保其中的文本在浏览器中不显示出来，尽管你可以通过添加URL @javascript:toggleHidden();@（要求你使用Grails 2.0 M2及以后版本）作为书签来显示它。

更好的方法是，你可以使用项目根目录下的 @left_to_do.groovy@脚本来了解还有什么需要翻译的。你可以像下面这样运行它：
{code}
./left_to_do.groovy es
{code}

这会以英文用户指南做参考输出给定翻译的全部不同之处。任何自从翻译后未发生变化的@\{hidden\}@块将 _不会_ 出现在差别输出中。换句话说，你所看到的是还没有被翻译的内容和已经翻译但发生变化的内容。注意@\{code\}@块会被忽略，所以你 _不需要_ 把它们包含在@\{hidden\}@内部。

要为页首提供翻译，例如用户指南的标题和子标题，仅需在'resources/doc.properties'文件中添加特定语言的条目，如下所示：
{code}
es.title=El Grails Framework
es.subtitle=...
{code}

对每种语言的翻译，以@<lang>@.开始的属性会覆盖对应的标准属性。在上面的例子中，用户指南的标题对于西班牙语的翻译而言将会是El Grails Framework。同样地，翻译人员的工作通过添加'<lang>.translators'来署名。
{code}
fr.translators=Stéphane Maldini
{code}

这是个逗号分隔的姓名（或者对应的本地语言中的名字）的列表，并且在用户指南中以"Translated by"标题进行显示。

你可以非常容易地使用@publishGuide_\*@和@publishPdf_\*@任务构建特定语言的翻译。例如，要构建法语版本的HTML和PDF格式的用户指南，仅需执行：

{code}
./gradlew publishPdf_fr
{code}

每种翻译生成在自己的目录中，例如，法语版的帮助文档会出现在@build/docs/fr@下面。然后你就可以通过打开@build/docs/<lang>/index.html@查看翻译的帮助文档。

全部的翻译作为[grails-doc Hudson CI构建|http://hudson.grails.org/job/grails_docs_2.0.x/lastSuccessfulBuild/artifact/build/docs/]项目的一部分会被创建，所以，不必亲自构建文档，你就可以很容易地查看它们的当前状态。
