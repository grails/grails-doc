In order to _transition_ execution of a flow from one state to the next you need some way of trigger an _event_ that indicates what the flow should do next. Events can be triggered from either view states or action states.

h4. Triggering Events from a View State

As discussed previously the start state of the flow in a previous code listing deals with two possible events. A @checkout@ event and a @continueShopping@ event:

{code:java}
def shoppingCartFlow = {
    showCart {
        on("checkout").to "enterPersonalDetails"
        on("continueShopping").to "displayCatalogue"
    }
    ...
}
{code}

Since the @showCart@ event is a view state it will render the view @grails-app/book/shoppingCart/showCart.gsp@. Within this view you need to have components that trigger flow execution. On a form this can be done use the [submitButton|tags] tag:

{code:xml}
<g:form>
    <g:submitButton name="continueShopping" value="Continue Shopping" />
    <g:submitButton name="checkout" value="Checkout" />
</g:form>
{code}

The form automatically submits back to the @shoppingCart@ flow. The name attribute of each [submitButton|tags] tag signals which event will be triggered. If you don't have a form you can also trigger an event with the [link|tags] tag as follows:

{code:xml}
<g:link event="checkout" />{code}

{note}
Prior to 2.0.0, it was required to specify the controller and/or action in forms and links, which caused the url to change when entering a subflow state. When the controller and action are not specified,
all url's are relative to the main flow execution url, which makes your flows reusable as subflows and prevents issues with the browser's back button.
{note}

h4. Triggering Events from an Action

To trigger an event from an @action@ you invoke a method. For example there is the built in @error()@ and @success()@ methods. The example below triggers the @error()@ event on validation failure in a transition action:

{code:java}
enterPersonalDetails {
   on("submit") {
         def p = new Person(params)
         flow.person = p
         if (!p.validate()) return error()
   }.to "enterShipping"
   on("return").to "showCart"
}
{code}

In this case because of the error the transition action will make the flow go back to the @enterPersonalDetails@ state.

With an action state you can also trigger events to redirect flow:

{code:java}
shippingNeeded {
   action {
       if (params.shippingRequired) yes()
       else no()
   }
   on("yes").to "enterShipping"
   on("no").to "enterPayment"
}{code}

