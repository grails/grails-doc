{hidden}
You can create your own Gant scripts by running the [create-script|commandLine] command from the root of your project. For example the following command:

{code}
grails create-script compile-sources
{code}

Will create a script called @scripts/CompileSources.groovy@. A Gant script itself is similar to a regular Groovy script except that it supports the concept of "targets" and dependencies between them:

{code:title=scripts/CompileSources.groovy}
target(default:"The default target is the one that gets executed by Grails") {
    depends(clean, compile)
}

target(clean:"Clean out things") {
    ant.delete(dir:"output")
}

target(compile:"Compile some sources") {
    ant.mkdir(dir:"mkdir")
    ant.javac(srcdir:"src/java", destdir:"output")
}
{code}

As demonstrated in the script above, there is an implicit @ant@ variable (an instance of @groovy.util.AntBuilder@) that allows access to the [Apache Ant API|http://ant.apache.org/manual/index.html].
{note}
In previous versions of Grails (1.0.3 and below), the variable was @Ant@, i.e. with a capital first letter.
{note}

You can also "depend" on other targets using the @depends@ method demonstrated in the @default@ target above.

h3. The default target

In the example above, we specified a target with the explicit name "default". This is one way of defining the default target for a script. An alternative approach is to use the @setDefaultTarget()@ method:

{code:title=scripts/CompileSources.groovy}
target("clean-compile": "Performs a clean compilation on the app source") {
    depends(clean, compile)
}

target(clean:"Clean out things") {
    ant.delete(dir:"output")
}

target(compile:"Compile some sources") {
    ant.mkdir(dir:"mkdir")
    ant.javac(srcdir:"src/java", destdir:"output")
}

setDefaultTarget("clean-compile")
{code}

This lets you call the default target directly from other scripts if you wish. Also, although we have put the call to @setDefaultTarget()@ at the end of the script in this example, it can go anywhere as long as it comes _after_ the target it refers to ("clean-compile" in this case).

Which approach is better? To be honest, you can use whichever you prefer - there don't seem to be any major advantages in either case. One thing we would say is that if you want to allow other scripts to call your "default" target, you should move it into a shared script that doesn't have a default target at all. We'll talk some more about this in the next section.

{hidden}
从你的项目根目录下，通过运行[create-script|commandLine]命令你可以创建你自己的Gant脚本。例如下面的命令：

{code}
grails create-script compile-sources
{code}

将会创建一个称为@scripts/CompileSources.groovy@的脚本。Gant脚本和通常的Groovy脚本类似，除了它支持"目标"的概念和它们之间的依赖：

{code:title=scripts/CompileSources.groovy}
target(default:"The default target is the one that gets executed by Grails") {
    depends(clean, compile)
}

target(clean:"Clean out things") {
    ant.delete(dir:"output")
}

target(compile:"Compile some sources") {
    ant.mkdir(dir:"mkdir")
    ant.javac(srcdir:"src/java", destdir:"output")
}
{code}

如上面脚本演示的那样，存在一个隐式的@ant@变量（ @groovy.util.AntBuilder@的实例），它允许对[Apache Ant API|http://ant.apache.org/manual/index.html]的访问。
{note}
在以前的Grails版本 (1.0.3及以下版本), 变量名是@Ant@，即第一个字母大写。
{note}

你还可以"依赖"其他的目标，方法是在上面的@default@目标中演示的@depends@方法。

h3. 默认目标

在上面的示例中，我们使用显式的名字"default"指定了一个目标。这是为脚本定义默认目标的一种方法。另一种是使用@setDefaultTarget()@方法：

{code:title=scripts/CompileSources.groovy}
target("clean-compile": "Performs a clean compilation on the app source") {
    depends(clean, compile)
}

target(clean:"Clean out things") {
    ant.delete(dir:"output")
}

target(compile:"Compile some sources") {
    ant.mkdir(dir:"mkdir")
    ant.javac(srcdir:"src/java", destdir:"output")
}

setDefaultTarget("clean-compile")
{code}

如果你愿意的话，这可以让你从其他脚本中直接调用这个默认目标。而且，尽管在这个例子中我们把对@setDefaultTarget()@的调用放到了脚本的最后，它也可以出现在任何地方，只要它位于它引用的目标（本例中的"clean-compile"） _之后_ 即可。

哪一种方法更好呢？坦率地讲，你可以使用你喜欢的方法 - 似乎两种方法都没有任何太大的优势。我们想说的一件事情是，如果你想允许其他的脚本调用你的默认目标，那么你应该把它移动到一个共享的脚本，该脚本根本没有一个默认目标。在下一节，我们会对此进行更多的讨论。
