{hidden}
The Grails Wrapper allows a Grails application to built without having to install Grails and configure a GRAILS_HOME environment variable.  The wrapper includes a small shell script and a couple of small bootstrap jar files that typically would be checked in to source code control along with the rest of the project.  The first time the wrapper is executed it will download and configure a Grails installation.  This wrapper makes it more simple to setup a development environment, configure CI and manage upgrades to future versions of Grails.  When the application is upgraded to the next version of Grails, the wrapper is updated and checked in to the source code control system and the next time developers update their workspace and run the wrapper, they will automatically be using the correct version of Grails.

h4. Generating The Wrapper

The [wrapper|commandLine] command can be used to generate the wrapper shell scripts and supporting jar files.  Execute the wrapper command at the top of an existing Grails project.

{code}
grails wrapper
{code}

In order to do this of course Grails must be installed and configured.  This is only a requirement for bootstrapping the wrapper.  Once the wrapper is generated there is no need to have a Grails installation configured in order to use the wrapper.

See the [wrapper|commandLine] command documentation for details about command line arguments.

By default the wrapper command will generate a @grailsw@ shell script and @grailsw.bat@ batch file at the top of the project.  In addition to those, a @wrapper/@ directory (the name of the directory is configurable via command line options) is generated which contains some support files which are necessary to run the wrapper.  All of these files should be checked into the source code control system along with the rest of the project.  This allows developers to check the project out of source code control and immediately start using the wrapper to execute Grails commands without having to install and configure Grails.

h4. Using The Wrapper

The wrapper script accepts all of the same arguments as the normal grails command.

{code}
./grailsw create-domain-class com.demo.Person
./grailsw run-app
./grailsw test-app unit:

etc...
{code}

{hidden}
Grails封装程序允许在没有安装Grails和设置GRAILS_HOME环境变量的情况下构建Grails应用程序。这个封装程序包含了一个很小的Shell脚本和几个很小的辅助jar文件，它们通常和项目的其他内容被检入到源代码控制系统。封装程序第一次执行时，它会下载并配置Grails。这使得设置开发环境、配置CI和管理向Grails未来版本的升级更加简单，只要把封装程序进行更新并检入到源代码控制系统，那么下次开发人员更新他们的工作区，然后再运行封装程序，他们将自动地使用正确版本的Grails。

h4. 生成封装程序

[wrapper|commandLine]命令用于生成封装程序Shell脚本和支撑性的Jar文件。要在现有Grails项目的顶层目录执行wrapper命令。

{code}
grails wrapper
{code}

要这么做的话，Grails当然必须已经安装和配置好了。这只是对生成封装程序的一个需求。一旦封装程序生成了，要使用封装程序的话就没有必要使用配置好的Grails了。

查看[wrapper|commandLine]命令的文档了解命令行参数的细节信息。

默认情况下wrapper命令将会在项目的根目录下生成一个@grailsw@ Shell脚本和一个@grailsw.bat@ 批处理文件。除了这些之外，还生成了@wrapper/@目录（目录的名字可以通过命令行选项配置），其中包含了运行封装程序所必需的支持文件。所有这些文件都应该和其他的项目文件被检入到源代码控制系统中。这样就允许开发人员从源代码控制系统中检出项目并且可以立即开始使用封装程序执行Grails命令，不需要安装和配置Grails。

h4. 使用封装程序

封装程序的脚本接受与普通grails命令相同的参数。

{code}
./grailsw create-domain-class com.demo.Person
./grailsw run-app
./grailsw test-app unit:

等等。。。
{code}
