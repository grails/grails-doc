Automated testing is a key part of Grails. Hence, Grails provides many ways to making testing easier from low level unit testing to high level functional tests. This section details the different capabilities that Grails offers for testing.

{note}
Grails 1.3.x and below used the @grails.test.GrailsUnitTestCase@ class hierarchy for testing in a JUnit 3 style. Grails 2.0.x and above deprecates these test harnesses in favour of mixins that can be applied to a range of different kinds of tests (JUnit 3, Junit 4, Spock etc.) without subclassing
{note}

The first thing to be aware of is that all of the @create-\*@ and @generate-\*@ commands create @unit@ or @integration@ tests automatically. For example if you run the [create-controller|commandLine] command as follows:

{code:java}
grails create-controller com.acme.app.simple
{code}

Grails will create a controller at @grails-app/controllers/com/acme/app/SimpleController.groovy@, and also a unit test at @test/unit/com/acme/app/SimpleControllerTests.groovy@. What Grails won't do however is populate the logic inside the test! That is left up to you.

{note}
The default class name suffix is @Tests@ but as of Grails 1.2.2, the suffix of @Test@ is also supported.
{note}

h4. Running Tests

Tests are run with the [test-app|commandLine] command:

{code:java}
grails test-app
{code}

The command will produce output such as:

{code:java}
-------------------------------------------------------
Running Unit Tests...
Running test FooTests...FAILURE
Unit Tests Completed in 464ms ...
-------------------------------------------------------

Tests failed: 0 errors, 1 failures
{code}

whilst showing the reason for each test failure.

{note}
You can force a clean before running tests by passing @-clean@ to the @test-app@ command.
{note}

Grails writes both plain text and HTML test reports to the @target/test-reports@ directory, along with the original XML files. The HTML reports are generally the best ones to look at.

Using Grails' [interactive mode|guide:interactiveMode] confers some distinct advantages when executing tests. First, the tests will execute significantly faster on the second and subsequent runs. Second, a shortcut is available to open the HTML reports in your browser:

{code:java}
open test-report
{code}

You can also run your unit tests from within most IDEs.

h4. Targeting Tests

You can selectively target the test(s) to be run in different ways. To run all tests for a controller named @SimpleController@ you would run:

{code}
grails test-app SimpleController
{code}

This will run any tests for the class named @SimpleController@. Wildcards can be used...

{code}
grails test-app *Controller
{code}

This will test all classes ending in @Controller@. Package names can optionally be specified...

{code}
grails test-app some.org.*Controller
{code}

or to run all tests in a package...

{code}
grails test-app some.org.*
{code}

or to run all tests in a package including subpackages...

{code}
grails test-app some.org.**.*
{code}

You can also target particular test methods...

{code}
grails test-app SimpleController.testLogin
{code}

This will run the @testLogin@ test in the @SimpleController@ tests. You can specify as many patterns in combination as you like...

{code}
grails test-app some.org.* SimpleController.testLogin BookController
{code}

h4. Targeting Test Types and/or Phases

In addition to targeting certain tests, you can also target test _types_ and/or _phases_ by using the @phase:type@ syntax.

{note}
Grails organises tests by phase and by type. A test phase relates to the state of the Grails application during the tests, and the type relates to the testing mechanism.

Grails comes with support for 4 test phases (@unit@, @integration@, @functional@ and @other@) and JUnit test types for the @unit@ and @integration@ phases. These test types have the same name as the phase.

Testing plugins may provide new test phases or new test types for existing phases. Refer to the plugin documentation.
{note}

To execute the JUnit @integration@ tests you can run:

{code}
grails test-app integration:integration
{code}

Both @phase@ and @type@ are optional. Their absence acts as a wildcard. The following command will run all test types in the @unit@ phase:

{code}
grails test-app unit:
{code}

The Grails [Spock Plugin|http://grails.org/plugin/spock] is one plugin that adds new test types to Grails. It adds a @spock@ test type to the @unit@, @integration@ and @functional@ phases. To run all spock tests in all phases you would run the following:

{code}
grails test-app :spock
{code}

To run the all of the spock tests in the @functional@ phase you would run...

{code}
grails test-app functional:spock
{code}

More than one pattern can be specified...

{code}
grails test-app unit:spock integration:spock
{code}

h4. Targeting Tests in Types and/or Phases

Test and type/phase targetting can be applied at the same time:

{code}
grails test-app integration: unit: some.org.**.*
{code}

This would run all tests in the @integration@ and @unit@ phases that are in the package @some.org@ or a subpackage.
