{hidden}
h4. The GORM API

The GORM API has been formalized into a set of classes (@GormStaticApi@, @GormInstanceApi@ and @GormValidationApi@) that get statically wired into every domain class at the byte code level. The result is better code completion for IDEs, better integration with Java and the potential for more GORM implementations for other types of data stores.

h4. Detached Criteria and Where Queries

Grails 2.0 features support for [DetachedCriteria|guide:detachedCriteria] which are criteria queries that are not associated with any session or connection and thus can be more easily reused and composed:

{code}
def criteria = new DetachedCriteria(Person).build {
    eq 'lastName', 'Simpson'
}
def results = criteria.list(max:4, sort:"firstName")
{code}

To support the addition of [DetachedCriteria|guide:detachedCriteria] queries and encourage their use a new @where@ method and DSL has been introduced to greatly reduce the complexity of criteria queries:

{code}
def query = Person.where {
    (lastName != "Simpson" && firstName != "Fred") || (firstName == "Bart" && age > 9)
}
def results = query.list(sort:"firstName")
{code} 

See the documentation on [DetachedCriteria|guide:detachedCriteria] and [Where Queries|guide:whereQueries] for more information.

h4. New findOrCreate and findOrSave Methods

Domain classes have support for the findOrCreateWhere, findOrSaveWhere, findOrCreateBy and findOrSaveBy query methods which behave just like findWhere and findBy methods except that they should never return null. If a matching instance cannot be found in the database then a new instance is created, populated with values represented in the query parameters and returned. In the case of findOrSaveWhere and findOrSaveBy, the instance is saved before being returned.

{code}
def book = Book.findOrCreateWhere(author: 'Douglas Adams', title: "The Hitchiker's Guide To The Galaxy")
def book = Book.findOrSaveWhere(author: 'Daniel Suarez', title: 'Daemon')
def book = Book.findOrCreateByAuthorAndTitle('Daniel Suarez', 'Daemon')
def book = Book.findOrSaveByAuthorAndTitle('Daniel Suarez', 'Daemon')
{code}

h4. Abstract Inheritance

GORM now supports abstract inheritance trees which means you can define queries and associations linking to abstract classes:

{code}
abstract class Media {
    String title
    …
}
class Book extends Media {
}
class Album extends Media {

}
class Account {
    static hasMany = [purchasedMedia:Media]
}

..

def allMedia = Media.list()
{code}

h4. Multiple Data Sources Support

It is now possible to define multiple datasources in @DataSource.groovy@ and declare one or more datasources a particular domain uses by default:

{code}
class ZipCode {

   String code

   static mapping = {
      datasource 'ZIP_CODES'
   }
}
{code}

If multiple datasources are specified for a domain then you can use the name of a particular datasource as a namespace in front of any regular GORM method:

{code}
def zipCode = ZipCode.auditing.get(42)
{code}

For more information see the section on [Multiple Data Sources|guide:multipleDatasources] in the user guide.

h4. Database Migrations

A new [database migration plugin|http://grails.org/plugin/database-migration] has been designed and built for Grails 2.0 allowing you to apply migrations to your database, rollback changes and diff your domain model with the current state of the database.

h4. Database Reverse Engineering

A new [database reverse engineering|http://www.grails.org/plugin/db-reverse-engineer] plugin has been designed and built for Grails 2.0 that allows you to generate a domain model from an existing database schema.

h4. Hibernate 3.6

Grails 2.0 is now built on Hibernate 3.6

h4. Bag Collections

You can now use Hibernate [Bag|http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html/collections.html]s for mapped collections to avoid the memory and performance issues of loading large collections to enforce @Set@ uniqueness or @List@ order.

For more information see the section on [Sets, Lists and Maps|guide:sets,ListsAndMaps] in the user guide.
{hidden}
h4. GORM API

GORM API现在已形式化为一组类（@GormStaticApi@, @GormInstanceApi@, @GormValidationApi@），这组类静态地被注入每个领域类的字节码中。这样做产生的结果是IDE中更好的的代码完成功能，更好的与Java集成，以及对其他类型的数据存储的更多GORM实现的潜在可能性。

h4. 分离的标准查询和Where查询

Grails 2.0包括对[DetachedCriteria|guide:detachedCriteria]功能的支持，该功能指的是标准查询不再和任何会话或者连接关联，因此可以很方便的复用和组合：

{code}
def criteria = new DetachedCriteria(Person).build {
    eq 'lastName', 'Simpson'
}
def results = criteria.list(max:4, sort:"firstName")
{code}

为了支持[DetachedCriteria|guide:detachedCriteria]查询并鼓励它们的使用，GORM引入了一个新的@where@方法和DSL，大大降低了标准查询的复杂性。

{code}
def query = Person.where {
    (lastName != "Simpson" && firstName != "Fred") || (firstName == "Bart" && age > 9)
}
def results = query.list(sort:"firstName")
{code} 

查看有关[DetachedCriteria|guide:detachedCriteria]和[Where查询|guide:whereQueries]的章节了解更多信息。

h4. 新增的findOrCreate和findOrSave方法

领域类现在已经支持findOrCreateWhere, findOrSaveWhere, findOrCreateBy和findOrSaveBy查询方法，这些方法除了从来不返回null值以外跟findWhere和findBy方法类似。如果在数据库中没有找到匹配的实例，那么一个新实例会被创建，使用查询参数中的值进行填充并返回，在findOrSaveWhere和findOrSaveBy的情况下，创建的实例在被返回之前先会被保存。

{code}
def book = Book.findOrCreateWhere(author: 'Douglas Adams', title: "The Hitchiker's Guide To The Galaxy")
def book = Book.findOrSaveWhere(author: 'Daniel Suarez', title: 'Daemon')
def book = Book.findOrCreateByAuthorAndTitle('Daniel Suarez', 'Daemon')
def book = Book.findOrSaveByAuthorAndTitle('Daniel Suarez', 'Daemon')
{code}

h4. 抽象继承

GORM现在支持抽象的继承树，这意味着你可以定义抽象类的查询和关联：

{code}
abstract Media {
    String title
    …
}
class Book extends Media {
}
class Album extends Media {

}
class Account {
    static hasMany = [purchasedMedia:Media]
}

..

def allMedia = Media.list()
{code}


h4. 多数据源支持

现在可以在@DataSource.groovy@定义多个数据源并且声明一个特定的领域类默认使用的一个或多个数据源：

{code}
class ZipCode {

   String code

   static mapping = {
      datasource 'ZIP_CODES'
   }
}
{code}

如果为一个领域类指定了多个数据源，那么你可以使用特定数据源的名字作为名字空间，出现在任何常规的GORM方法之前：

{code}
def zipCode = ZipCode.auditing.get(42)
{code}

更多信息参考本用户指南中有关[多数据源|guide:multipleDatasources]的章节

h4. 数据库迁移（Database Migration）

一个新设计的[数据库迁移插件|http://grails.org/plugin/database-migration]专为Grails 2.0构建，允许对你的数据库应用迁移，回滚迁移所做的变更以及比较领域模型和数据库的当前状态的差别。

h4. 数据库逆向工程

新设计的[数据库逆向工程插件|http://www.grails.org/plugin/db-reverse-engineer]专为Grails 2.0构建，允许你根据已有的数据库模式自动生成领域模型。

h4. Hibernate 3.6

Grails 2.0现在构建于Hibernate 3.6之上

h4. Bag集合

你现在可以对映射的集合使用Hibernate [Bag|http://docs.jboss.org/hibernate/stable/core/reference/en-US/html/collections.html]以避免加载大规模集合时实施@Set@唯一性或@List@元素顺序而引起的内存和性能问题。

更多信息参考本用户指南有关[集合、列表和映射|guide:sets,ListsAndMaps]的章节。
