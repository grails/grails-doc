h4. GORM API

GORM API现在已正式规范为类的集合( @GormStaticApi@, @GormInstanceApi@ and @GormValidationApi@ )，并且在每个领域类的字节码级别上进行注入的。如此一来，对IDE的代码补齐，Java的集成，以及潜在的其他类型的GORM实现来说，提供了更好的支持。

h4. 分离的Criteria和Where查询

Grails 2.0中分离的 [DetachedCriteria|guide:detachedCriteria]  是指条件查询不再跟任何数据库会话或者连接关联，因此可以很方便的复用和构造，比如：

{code}
def criteria = new DetachedCriteria(Person).build {
    eq 'lastName', 'Simpson'
}
def results = criteria.list(max:4, sort:"firstName")
{code}

为了支持 [DetachedCriteria|guide:detachedCriteria] 查询和减少条件查询的复杂性，一个新的 @where@ 方法及其DSL被引入，比如：

{code}
def query = Person.where {
    (lastName != "Simpson" && firstName != "Fred") || (firstName == "Bart" && age > 9)
}
def results = query.list(sort:"firstName")
{code} 

更多信息请参考本手册的 [DetachedCriteria|guide:detachedCriteria] and [Where Queries|guide:whereQueries] 章节。

h4. 全新的findOrCreate和findOrSave方法

领域类现在已经支持 findOrCreateWhere, findOrSaveWhere, findOrCreateBy 和 findOrSaveBy 查询方法，这些方法除了不返回null值以外，跟findWhere和findBy方法基本类似。如果在数据库中没有找到符合条件的实例，系统将会根据查询参数创建一个全新的实例返回，不过在findOrSaveWhere 和findOrSaveBy中,实例是先保存入库再返回的。示例代码如下：

{code}
def book = Book.findOrCreateWhere(author: 'Douglas Adams', title: "The Hitchiker's Guide To The Galaxy")
def book = Book.findOrSaveWhere(author: 'Daniel Suarez', title: 'Daemon')
def book = Book.findOrCreateByAuthorAndTitle('Daniel Suarez', 'Daemon')
def book = Book.findOrSaveByAuthorAndTitle('Daniel Suarez', 'Daemon')
{code}

h4. 抽象继承

GORM现在支持抽象的继承树或者说现在你可以定义抽象类的查询和关联了，比如：

{code}
abstract class Media {
    String title
    …
}
class Book extends Media {
}
class Album extends Media {

}
class Account {
    static hasMany = [purchasedMedia:Media]
}

..

def allMedia = Media.list()
{code}

h4. 支持多个数据源

现在，可以在 @DataSource.groovy@ 定义多个数据源了，对于特定的领域类来说，声明一个或者多个数据源的示例如下：

{code}
class ZipCode {

   String code

   static mapping = {
      datasource 'ZIP_CODES'
   }
}
{code}

在使用有多个数据源的领域类时候，只需要在常规的GORM方法前加上特定数据源名称即可。比如：

{code}
def zipCode = ZipCode.auditing.get(42)
{code}

更多信息请参考本手册的 [Multiple Data Sources|guide:multipleDatasources] 章节

h4. 数据库迁移（Database Migration）

新设计的 [database migration plugin|http://grails.org/plugin/database-migration] 完全是基于Grails 2.0的，有了它，你可以迁移你的数据库了，比如根据当前的数据库状态回滚所做的变化，比较领域模型。

h4. 数据库逆向工程

基于Grails 2.0的数据库逆向工程插件 [database reverse engineering|http://www.grails.org/plugin/db-reverse-engineer] 可以根据已有的数据库模式（database schema），自动生成领域模型。

h4. Hibernate 3.6

Grails 2.0现在基于Hibernate 3.6了

h4. Bag集合

现在Hibernate的 [Bag|http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html/collections.html] 集合（Bag集合，即在集合中允许重复，可以简单的看作为Set和List的结合体－－译者注）在Grails 2.0中也得到了支持，由此也比较好的解决了加载大数据量集合转换（ @Set@ 必须唯一或者 @List@ 必须有序）导致的内存和性能问题。

更多信息请参考本手册的集合、列表、映射  [Sets, Lists and Maps|guide:sets,ListsAndMaps] 章节。

