{hidden}
h4. Interactive Mode and Console Enhancements

Grails 2.0 features brand new console output that is more concise and user friendly to consume. An example of the new output when running tests can be seen below:

!test-output.png!

In general Grails makes its best effort to display update information on a single line and only present the information that is crucial. This means that while in previous versions of Grails the [war|commandLine] command produced many lines of output, in Grails 2.0 only 1 line of output is produced:

!war-output.png!

In addition simply typing 'grails' at the command line activates the new interactive mode which features TAB completion, command history and keeps the JVM running to ensure commands execute much quicker than otherwise

!interactive-output.png!

For more information on the new features of the console refer to the section of the user guide that covers the [console and interactive mode|guide:interactiveMode].

h4. Reloading Agent

Grails 2.0 reloading mechanism no longer uses class loaders, but instead uses a JVM agent to reload changes to class files. This results in greatly improved reliability when reloading changes and also ensures that the class files stored in disk remain consistent with the class files loaded in memory, which reduces the need to run the [clean|commandLine] command.

h4. New Test Report and Documentation Templates

There are new templates for displaying test results that are clearer and more user friendly than the previous reports:

!test-template.png!

In addition, the Grails documentation engine has received a facelift with a new template for presenting Grails application and plugin documentation:

!doc-template.png!

See the section on the [documentation engine|guide:docengine] for more usage info.

h4. Use a TOC for Project Docs

The old documentation engine relied on you putting section numbers into the gdoc filenames. Although convenient, this effectively made it difficult to restructure your user guide by inserting new chapters and sections. In addition, any such restructuring or renaming of section titles resulted in breaking changes to the URLs.

You can now use logical names for your gdoc files and define the structure and section titles in a YAML table-of-contents file, as described in the section on the [documentation engine|guide:docengine]. The logical names appear in the URLs, so as long as you don't change those, your URLs will always remain the same no matter how much restructuring or changing of titles you do.

Grails 2.0 even provides a [migrate-docs|commandLine] command to aid you in migrating existing gdoc user guides.

h4. Enhanced Error Reporting and Diagnosis

Error reporting and problem diagnosis has been greatly improved with a new errors view that analyses stack traces and recursively displays problem areas in your code:

!errors-view.png!

In addition stack trace filtering has been further enhanced to display only relevant trace information:

{code}
   Line | Method
->>   9 | getValue     in Book.groovy
- - - - - - - - - - - - - - - - - - - - - - - - -
|     7 | getBookValue in BookService.groovy
|   886 | runTask . .  in ThreadPoolExecutor.java
|   908 | run          in     ''
^   662 | run . . . .  in Thread.java
{code}

h4. H2 Database and Console

Grails 2.0 now uses the H2 database instead of HSQLDB, and enables the H2 database console in development mode (at the URI /dbconsole) so that the in-memory database can be easily queried from the browser:

!h2-console.png!

h4. Plugin Usage Tracking

To enhance community awareness of the most popular plugins an opt-in plugin usage tracking system has been included where users can participate in providing feedback to the plugin community on which plugins are most popular.

This will help drive the roadmap and increase support of key plugins while reducing the need to support older or less popular plugins thus helping plugin development teams focus their efforts.


h4. Dependency Resolution Improvements

There are numerous improvements to dependency resolution handling via Ivy including:

* Grails now makes a best effort to cache the previous resolve and avoid resolving again unless you change @BuildConfig.groovy@.
* Plugins dependencies now appear in the dependency report generated by @grails dependency-report@
* Plugins published with the release plugin now publish their transitive plugin dependencies in the generated POM which are later resolved.
* It is now possible to customize the ivy cache directory via @BuildConfig.groovy@

{code}
grails.project.dependency.resolution = {
    cacheDir "target/ivy-cache"
}
{code}

* You can change the ivy cache directory for all projects via @settings.groovy@

{code}
grails.dependency.cache.dir = "\${userHome}/.ivy2/cache"
{code}

* It is now possible to completely disable resolution from inherited repositories (repositories defined by other plugins):

{code}
grails.project.dependency.resolution = {

    repositories {
        inherits false // Whether to inherit repository definitions from plugins
        ...
    }
    ...
}
{code}

* It is now possible to easily disable checksum validation errors:

{code}
grails.project.dependency.resolution = {
    checksums false // whether to verify checksums or not
}
{code}
{hidden}
h4. 交互模式和控制台的增强

Grails 2.0中全新的命令行输出变得更加简洁和友好，以执行测试为例，新的输出如下图所示：

!test-output.png!

总的来说，Grails尽量在一行中显示所有相关的更新信息，并且仅仅显示最重要的信息。换句话说，以前版本的[war|commandLine]命令将产生很多行的输出，但是在2.0中，只有如下图所示的一行输出。

!war-output.png!

此外如果只是在命令行简单的键入'grails'命令，将激活带TAB补全和命令历史功能的交互模式，在此模式下JVM一直保持运行，这样就可以保证命令的执行比JVM没有一直保持运行时更快。

!interactive-output.png!

更多有关控制台新功能的信息请参考本用户指南的[控制台和交互模式|guide:interactiveMode]章节。


h4. 重新加载代理

Grails 2.0的重新加载机制不再使用类加载器(Class Loaders)，而是使用JVM代理来重新加载那些改变过的类文件。这样一来，既能提高系统的稳定性，也可以保证磁盘和内存中的类文件的一致性，从而可以减少执行[clean|commandLine]命令的需求。

h4. 全新的测试报告和文档模板

使用新的模板显示测试结果使得比以前的测试报告更加清晰和友好：

!test-template.png!

除此之外，Grails的文档引擎采用了新的模板来展现其插件和应用的文档，使文档焕然一新：

!doc-template.png!

更多用法信息请参考有关[文档引擎|guide:docengine]的章节。

h4. 在项目文档中使用目录

旧有的文档引擎需要你将章节号写在gdoc文件名中。此举虽然便利，但是会导致在新增章节的时候很难重新组织你的用户手册。而且任何章节的标题变化和结构变化，将会导致此章节的URL失效。

现在，你可以为gdoc文件使用逻辑性的名字并且可以将章节的结构和章节的标题定义在YAML目录文件中，对此[文档引擎|guide:docengine]一节中有更多描述。出现在URL中的是逻辑性的名字，只要你不更改这些逻辑性的名字，无论你怎样调整章节的结构或改变他们的标题，你的URL将总是相同的。

Grails 2.0还提供了[migrate-docs|commandLine]命令来帮助迁移已有的gdoc用户指南。

h4. 错误报告和诊断的增强

错误报告和问题诊断功能已经得到了大幅改进，包括一个新的错误视图能够分析栈跟踪和递归地显示你代码中的问题区域：

!errors-view.png!

此外，栈跟踪过滤功能已经进一步得到增强，只显示相关的异常跟踪信息：

{code}
   Line | Method
->>   9 | getValue     in Book.groovy
- - - - - - - - - - - - - - - - - - - - - - - - -
|     7 | getBookValue in BookService.groovy
|   886 | runTask . .  in ThreadPoolExecutor.java
|   908 | run          in     ''
^   662 | run . . . .  in Thread.java
{code}


h4. H2数据库及其控制台

现在Grails 2.0使用H2数据库而不是HSQLDB，并且在开发模式下启用了H2数据库控制台（通过URI /dbconsole访问），这样可以通过浏览器非常容易地对内存数据库进行查询：

!h2-console.png!


h4. 跟踪插件的使用情况

为了增强社区对最受欢迎插件情况的了解，引入了单向确认(opt-in)的插件使用情况跟踪系统，这样用户可以将那些是最受欢迎的插件反馈给插件社区。

这有助于推动系统的线路图和增加对重要插件的支持，同时对那些陈旧或者不够流行的插件减少不必要的支持，从而帮助插件开发团队集中他们的精力。


h4. 依赖解析的增强

借助于Ivy的依赖解析处理有许多改进，包括：

* 如果不改变@BuildConfig.groovy@的话，Grails将尽量使用以前的缓存，从而避免再次解析。
* 插件依赖现在出现在@grails dependency-report@生成的依赖报表中。
* 通过release插件发布的插件现在可以将其传递插件依赖生成在POM中，供以后插件依赖解析时使用。
* 通过@BuildConfig.groovy@，现在可以自定义ivy的缓存目录

{code}
grails.project.dependency.resolution = {
    cacheDir "target/ivy-cache"
}
{code}

* 通过修改@settings.groovy@可以改变所有项目的ivy缓存目录

{code}
grails.dependency.cache.dir = "\${userHome}/.ivy2/cache"
{code}

* 现在可以完全禁用对继承的存储仓库（定义在别的插件中）的依赖解析：

{code}
grails.project.dependency.resolution = {

    repositories {
        inherits false // 是否继承插件里的仓库定义
        ...
    }
    ...
}
{code}

* 现在可以容易地禁用校验和验证错误：

{code}
grails.project.dependency.resolution = {
    checksums false // 是否验证校验和
}
{code}
