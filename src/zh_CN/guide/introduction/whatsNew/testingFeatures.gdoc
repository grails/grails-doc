{hidden}
h4. New Unit Testing Console Output

Test output from the test-app command has been improved:

!test-output.png!

h4. New Unit Testing API

There is a new unit testing API based on mixins that supports JUnit 3, 4 and Spock style tests (with Spock 0.6 and above). Example:

{code:java}
import grails.test.mixin.TestFor

@TestFor(SimpleController)
class SimpleControllerTests  {
    void testIndex() {
        controller.home()

        assert view == "/simple/homePage"
        assert model.title == "Hello World"
    }
}
{code}

The [documentation on testing|guide:testing] has also been re-written around this new framework.

h4. Unit Testing GORM

A new in-memory GORM implementation is present that supports many more features of the GORM API making unit testing of criteria queries, named queries and other previously unsupported methods possible.

h4. Faster Unit Testing with Interactive Mode

The new interactive mode (activated by typing 'grails') greatly improves the execution time of running unit and integration tests.

h4. Unit Test Scaffolding

A unit test is now generated for scaffolded controllers
{hidden}

h4. 新的单元测试输出结果

运行@test-app@命令的输出结果已经提升为如下图所示：

!test-output.png!


h4. 新的单元测试API

新的单元测试API现在支持JUnit 3, 4和Spock风格(Spock 0.6以上)的测试了，比如：

{code:java}
import grails.test.mixin.TestFor

@TestFor(SimpleController)
class SimpleControllerTests  {
    void testIndex() {
        controller.home()

        assert view == "/simple/homePage"
        assert model.title == "Hello World"
    }
}
{code}

本文档中的[测试|guide:testing]部分也基于此框架进行了重写。


h4. GORM的单元测试

在单元测试方面，新的基于内存的GORM实现，使得GORM在条件查询、命名查询以及以前并未支持的方法也得到了很好的支持。


h4. 交互模式下更快的单元测试

新的交互模式（通过输入'grails'命令激活）极大的缩短了单元和集成测试的运行时间。


h4. 脚手架（Scaffolding）的单元测试

使用脚手架的控制器现在也自动生成一个单元测试。
