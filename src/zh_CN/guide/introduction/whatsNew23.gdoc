h4. 改善依赖管理

默认依赖解决方式改变为 [Aether|http://eclipse.org/aether] ，之前是由 Maven解决。你可以通过 @BuildConfig@ 设置来改变。

{code}
grails.project.dependency.resolver = "maven" // or ivy
{code}

使用 Aether 在部分功能上和 Maven类似，仅仅对快照处理，自定义包类型理解和其他一些东西有所改良。

此外，[dependency-report|commandLine] 命令升级后提供在命令窗口中输出依赖关联图，它将帮助分析关联失败的原因。可以通过 [Dependency Resolution|guide:dependencyResolution] 章节获取更多信息。

h4. 数据绑定

Grails 2.3 包括了新的数据绑定机制，比之前版本更灵活和方便保持数据绑定功能。
新的数据绑定功能包括以下特征：

* 使用 [BindingFormat|api:org.grails.databinding.BindingFormat] 为每个字段提供自定义数据格式 
* 使用 [ValueConverter|api:org.grails.databinding.converters.ValueConverter] 用于默认数据转换 
* 使用 [BindingFormat|api:org.grails.databinding.BindingFormat]  [FormattedValueConverter|api:org.grails.databinding.converters.FormattedValueConverter] 用于可定义化的数据转换 
* 使用 [BindUsing|api:org.grails.databinding.BindUsing] 绑定基本类自定义
* 使用 [BindUsing|api:org.grails.databinding.BindUsing] 绑定基本类自定义字段
* 在数据绑定中，可以将空白值或空字符串值转换为 null 值 (可配置)

可以通过 [Data Binding|guide:dataBinding] 章节获取更多信息

对于遗留的数据绑定可以通过修改 @grails-app/conf/Config.groovy@ 的 @grails.databinding.useSpringBinder@ 为 @true@ 。

遗留数据绑定并不支持新的数据绑定器。

h4. 将请求绑定到命令行对象中

如果命令对象承担一个控制动作请求内容，那么这个请求将解析并绑定给命令对象中。这将简化包含JSON或XML类型的请求。

通过 [Command Objects|guide:commandObjects] 章节获取更多信息

h4. 模型类作为命令类

当模型类作为命令类使用，则含有一个 @id@ 请求参数，Grails 框架将返回一个按照 @id@ 的数据类。

通过 [Command Objects|guide:commandObjects] 章节获取更多信息

h4. 运行分支

所有主要将被分割到不同JVM中执行，也就是生产路径和运行/测试路径是分开的。
这个是由 @BuildConfig@ 控制的：

{code}
grails.project.fork = [
   test: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, daemon:true], // configure settings for the test-app JVM
   run: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256], // configure settings for the run-app JVM
   war: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256], // configure settings for the run-war JVM
   console: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256]// configure settings for the Console UI JVM
]
{code}

通过 [Forked Mode|guide:forkedMode] 章节获取更多信息

h4. 运行分支的测试

通过交互模式可在后台运行调试，并快速执行一个新的守护进程。你可以在交互模式下重启守护进程。

{code}
\$ grails> restart-daemon
{code}

h4. 服务端 REST 改进

Grails' [REST support|guide:REST] 提供了一下重要特征:

* 富REST URL 映射 [REST URL Mapping support|guide:restfulMappings] 支持资源映射，单资源映射，叠套资源，版本和其他
* 新的可扩展请求、渲染和绑定的API
* 支持HAL，Atom 和 Hypermedia (HATEAOS)
* 提供脚手架控制器

通过 [user guide|guide:REST] 章节获取更多信息

h4. 新的脚手架 2.0 插件

Grails 脚手架拆分到 [separate plugin|http://grails.org/plugin/scaffolding] 插件中。2.0 版本包括支持 REST 控制器，异步控制器和Spock 单元测试。

h4. URL 映射可指定一个跳转

当映射匹配一个传入的请求，URL映射将跳转指定到Redirect中。

{code:java}
class UrlMappings {
    static mappings = {
        "/viewBooks"(redirect: '/books/list')
        "/viewAuthors"(redirect: [controller: 'author', action: 'list'])
        "/viewPublishers"(redirect: [controller: 'publisher', action: 'list', permanent: true])

        // ...
    }
}
{code}

通过 [user guide|guide:redirectMappings] 章节获取更多信息

h4. 异步支持

Grails 2.3 features new [Asynchronous Programming APIs|guide:async] that allow for asynchronous processing of requests and integrate seamlessly with GORM. Example:
Grails 2.3 新增 [Asynchronous Programming APIs|guide:async] ，将运行多请求进程无缝的运作与GORM。例如：

{code}
import static grails.async.Promises.*
...
def index() {
   tasks books: Book.async.list(),
         totalBooks: Book.async.count(),
         otherValue: {
           // do hard work
         }
}
{code}

通过 [the documentation|guide:async] 章节获取更多信息

h4. 编码中安全改良 Encoding / Escaping Improvements

Grails 2.3 对于 [Cross Site Scripting (XSS) prevention|guide:xssPrevention] ，包括：

* 将GSP表达式和可脚本化的内容默认转为 HTML
* 对于标签敏感性的编码性转换
* Double encoding prevention
* Optional automatic encoding of all data in a GSP page not considered safe

See the documentation on [Cross Site Scripting (XSS) prevention|guide:xssPrevention] for more information.

h4. Hibernate 3 and 4 support

The GORM for Hibernate 3 support for Grails has been extracted into a separate project, allowing new support for Hibernate 4 as a separate plugin.

h4. Controller Exception Handling

Controllers may define exception handler methods which will automatically be invoked any time an action in that controller throws an exception.

{code:java}
// grails-app/controllers/demo/DemoController.groovy
package demo

class DemoController {

    def someAction() {
        // do some work
    }

    def handleSQLException(SQLException e) {
        render 'A SQLException Was Handled'
    }

    def handleBatchUpdateException(BatchUpdateException e) {
        redirect controller: 'logging', action: 'batchProblem'
    }

    def handleNumberFormatException(NumberFormatException nfe) {
        [problemDescription: 'A Number Was Invalid']
    }
}
{code}

See the [controller exception handling|guide:controllerExceptionHandling] docs for more information.

h4. Namespaced Controllers

Controllers may now be defined in a namespace which allows for multiple controllers to be defined with the same name in different packages.

{code}
// grails-app/controllers/com/app/reporting/AdminController.groovy
package com.app.reporting

class AdminController {

    static namespace = 'reports'

    // ...
}
{code}

{code}
// grails-app/controllers/com/app/security/AdminController.groovy
package com.app.security

class AdminController {

    static namespace = 'users'

    // ...
}
{code}


{code}
// grails-app/conf/UrlMappings.groovy
class UrlMappings {

    static mappings = {
        '/userAdmin' {
            controller = 'admin'
            namespace = 'users'
        }

        '/reportAdmin' {
            controller = 'admin'
            namespace = 'reports'
        }

        "/\$namespace/\$controller/\$action?"()
    }
}
{code}

{code}
<g:link controller="admin" namespace="reports">Click For Report Admin</g:link>
<g:link controller="admin" namespace="users">Click For User Admin</g:link>
{code}

See the [namespaced controllers|guide:namespacedControllers] docs for more information.

h4. Command Line

The @create-app@ command will now by default generate the command line grailsw wrapper for newly created applications.  The @--skip-wrapper@ switch may be used to prevent the wrapper from being generated.

{code}
grails create-app appname --skip-wrapper
{code}
