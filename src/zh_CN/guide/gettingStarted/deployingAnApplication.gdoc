{hidden}
Grails applications are deployed as Web Application Archives (WAR files), and Grails includes the [war|commandLine] command for performing this task:

{code}
grails war
{code}

This will produce a WAR file under the @target@ directory which can then be deployed as per your container's instructions.

Unlike most scripts which default to the @development@ environment unless overridden, the @war@ command runs in the @production@ environment by default. You can override this like any script by specifying the environment name, for example:

{code}
grails dev war
{code}

{warning}
NEVER deploy Grails using the [run-app|commandLine] command as this command sets Grails up for auto-reloading at runtime which has a severe performance and scalability implications
{warning}

When deploying Grails you should always run your containers JVM with the @-server@ option and with sufficient memory allocation. A good set of VM flags would be:

{code}
-server -Xmx512M -XX:MaxPermSize=256m
{code}
{hidden}
Grails应用程序以Web应用档案文件（WAR文件）的形式进行部署，并且Grails提供了[war|commandLine]命令生成WAR文件：

{code}
grails war
{code}

这将会在@target@目录下生成一个WAR文件，然后根据你使用的容器的使用步骤进行部署。

跟运行在默认@development@环境下的大多数其他命令脚本不同， @war@ 命令缺省运行于@production@环境中的，你可以通过指定环境名称的方式来更改脚本的运行环境：

{code}
grails dev war
{code}

{warning}
一定不要使用[run-app|commandLine]命令来部署Grails，因为此命令会在运行时自动重新加载Grails应用程序，这样会严重影响服务器的性能和可扩展性。
{warning}

当部署Grails应用程序时，你要确保运行容器的JVM总是使用@-server@选项并且还有足够多的内存。推荐的VM参数如下：

{code}
-server -Xmx512M -XX:MaxPermSize=256m
{code}
