从Grails 1.2以来，本文的文档就是通过文档引擎来创建的，并且对你的Grails项目文档也是有效的。

文档引擎在 [Textile|http://textile.sitemonks.com/]  语法基础上，进行了一些改动，以适应自动创建工程文档的需要，此文档支持灵活链接、格式化等功能。

h4. 创建工程文档

为了使用此引擎，你需要遵循一些约定。首先，你需要创建 @src/docs/guide@ 目录用来存放文档的源文件。其次，需要创建文档文件，每一章节应该是独立的一个gdoc文件，并且还应该按照子章节的序号排列。比如下面示例：

{code}
+ src/docs/guide/introduction.gdoc
+ src/docs/guide/introduction/changes.gdoc
+ src/docs/guide/gettingStarted.gdoc
+ src/docs/guide/configuration.gdoc
+ src/docs/guide/configuration/build.gdoc
+ src/docs/guide/configuration/build/controllers.gdoc
{code}

注意，如果你喜欢，你可以将所有的gdoc文件都放在顶层的目录下。但是你也可以将子章节放到相应名称的子目录中，正如上例所示。

一旦你的源文件已经完成，你还是需要让文档引擎了知你文档的结构。为此你需要增加一个src/docs/guide/toc.yml文件，用以描述章节的结构和标题。 此 [YAML|http://www.yaml.org/] 格式的文件用以表述手册的树形格式的结构。比如上述的文件可以用如下的描述：

{code:yaml}
introduction:
  title: Introduction
  changes: Change Log
gettingStarted: Getting Started
configuration:
  title: Configuration
  build:
    title: Build Config
    controllers: Specifying Controllers
{code}

此种格式是相当简洁易懂的，一个章节如果含有子章节的话，要在其对应的文件名（当然是去掉.gdoc后缀）后边添加一个冒号（：），紧随其后的一行必须是title:加对此章节的标题描述，在标题后边是每一个子章节的信息。如果子章节是一个叶子节点（不包含子章节的章节）其标题跟章节名称在同一行就好了，但要以冒号分割（可以参考上述示例－－译者注）。

搞定！你可以轻松地添加、删除和移动toc.yml中的章节，这样就可以重新排版用户手册了。此外你也需要确认所有的章节名称（gdoc文件名称）是全局唯一的，因为那些内部超链接和HTML名称也要用到它们。不过也无需太担心，文档引擎将提示你那些重复的章节名称。

h4. 创建条目(Item)引用

条目引用出现在文档的快速引用章节。每一个引用都属于一个类别，此类别位于src/docs/ref中。举例来说，假设你定义了一个新的控制器方法renderPDF，此方法属于Controllers类别，那么你应该在如下所示的位置创建一个gdoc文本文件：

{code}
+ src/docs/ref/Controllers/renderPDF.gdoc
{code}

h4. 配置输出属性

在grails-app/conf/Config.groovy文件中，你有很多不同的属性可以设置，用以自定义文档的输出，比如：

* *grails.doc.title* - The title of the documentation
* *grails.doc.subtitle* - The subtitle of the documentation
* *grails.doc.authors* - The authors of the documentation
* *grails.doc.license* - The license of the software
* *grails.doc.copyright* - The copyright message to display
* *grails.doc.footer* - The footer to use

其他的一些，比如版本直接从你的项目中获取。如果标题没有设定，将缺省使用你的应用名称。

你可以按照以下选项为文档提供自定义(css、js、...)以及图片等功能：

* *grails.doc.css* - CSS 文件目录位置 (type @java.io.File@)
* *grails.doc.js* - Javascript 文件目录位置 (type @java.io.File@)
* *grails.doc.style* - 自定义的HTML模板目录位置 (type @java.io.File@)
* *grails.doc.images* - 被用于模板和内建文档的图片文件目录位置 (type @java.io.File@)

设定 @grails.doc.css@ 值并将 custom.css 文件放在那个位置。Grails将自动将这个css文件放入到文档中。你甚至可以将 custom-pdf.css 文件放到那个目录，它自动为pdf版本的文档加载那个css。

h4. 生成文档

一旦你创建了文档（语法请参考下一节），你就可以生成HTML版本的文档了，命令如下：

{code}
grails doc
{code}

此命令将输出到docs/manual/index.html，这样你就可以在浏览器中查看文档了。

h4. 文档基础

正如以前所述，文档语法跟Textile或者Confluence风格的wiki标签。下述章节将对基本的语法做个简单地介绍。

h5. 基本格式

等宽字体: monospace
{code}
\@monospace\@
{code}

斜体: italic
{code}
\_italic\_
{code}

黑体: bold
{code}
*bold*
{code}

图像:
!http://grails.org/img/grails.png!

这样写

{code:xml}
\!!http://grails.org/img/grails.png!\!
{code}

你可以设置指定的图片链接地址：

{code:xml}
\!someFolder/my_diagram.png\!
{code}

这个图片应该内建在你的项目中。当前没有默认文档的图片文件目录，你可以使用 Config.groovy 文件中的 @grails.doc.images@ 属性给它设置一个。

{code}
grails.doc.images = new File("src/docs/images")
{code}

上面的例子，你应当将 my_diagram.png 文件放在  'src/docs/images/someFolder'

h5. 链接

文档生成器对于链接可以不同的几个方法，最基本的外部链接可以使用以下两个：

{code}
[SpringSource|http://www.springsource.com/]
{code}

或

{code}
"SpringSource":http://www.springsource.com/
{code}

对于链接到手册的其他章节位置，你可以通过名称的方法来实现：

{code}
[Intro|guide:introduction]
{code}

章节名称是通过gdoc文件名来获得的。如果找不任何相关章节，文档生成器将提出警告。

对于小章节Item，你可以通过下面的方法：

{code}
[controllers|renderPDF]
{code}

此种情况，要引用的类别名称在|左边，而要引用的条目名称位于右边。

最后，如果是外部 APIs 的链接，你需要使用 @api:@ 前缀。例如：

{code}
[String|api:java.lang.String]
{code}

文档引擎将自动生成合适的javadoc链接。对于额外的API，你可以通过grails-app/conf/Config.groovy来进行配置，比如：

{code}
grails.doc.api.org.hibernate=
            "http://docs.jboss.org/hibernate/stable/core/javadocs"
{code}

上述示例中，配置org.hibernate包指向Hibernate的官方API文档。

h5. 列表和标头

标头可以通过字母'h'加数字再加一个点来表示，比如：

{code}
h3.<space>Heading3
h4.<space>Heading4
{code}

无序的列表可以通过*字符来定义：

{code}
* item 1
** subitem 1
** subitem 2
* item 2
{code}

有序的列表可以通过#来定义：

{code}
# item 1
{code}

表格可以通过宏table来实现：

{table}
 *Name* | *Number*
 Albert | 46
 Wilma | 1348
 James | 12
{table}

{code}
\{table}
 *Name* | *Number*
 Albert | 46
 Wilma | 1348
 James | 12
\{table}
{code}

h5. 代码和提示

你可以通过宏code来定义代码块，比如：

{code}
class Book {
    String title
}
{code}

{code}
\{code\}
class Book {
    String title
}
\{code\}
{code}

上述示例展示了Java和Groovy代码的高亮语法显示，但是你也可以高亮XML标签，比如：

{code:xml}
<hello>world</hello>
{code}

{code}
\{code:xml\}
<hello>world</hello>
\{code\}
{code}

还有一些用于提示和警告的宏：

Note:
{note}
This is a note!
{note}

{code}
\{note\}
This is a note!
\{note\}
{code}

Warning:

{warning}
This is a warning!
{warning}

{code}
\{warning\}
This is a warning!
\{warning\}
{code}
