DataSource中的 @dbCreate@ 属性是很重要的，正如其所暗示，Grails将根据此值和[GORM|guide:GORM]类在运行时来自动生成数据库表。可选项已经在 [DataSource|guide:dataSource] 章节中介绍：

* @create@
* @create-drop@
* @update@
* @validate@
* 空(no value)

在开发模式 [development|guide:environments]  中， @dbCreate@ 默认是设置为 "create-drop"，但是当开发到一定程度（更进一步要运行于生产环境），你将不会再采用这种每次启动先删除再创建的方式。

当你想保留数据并且只想更新所变化的代码时，可以尝试使用update。不过Hibernate对更新的支撑是非常保守的。其在数据安全方面不能给你任何保证，此外它也不能自动检测到字段或者表的重命名，因此在新增的同时旧有的依然保留。

Grails支持数据迁移"Database Migration":http://grails.org/plugin/database-migration 插件，只要在 @grails-app/conf/BuildConfig.groovy@ 中加上:

{code:java}
grails.project.dependency.resolution = {
    ...
    plugins {
        runtime ':database-migration:1.3.1'
    }
}
{code}

此插件以 "Liquibase":http://www.liquibase.org/ 为基础，除了具有原来的强大功能外，其还对GORM提供了支持(比如通过领域类和数据库的比较来自动生成变化内容）。
