Grails 含有非常有用的核心设置，它们适合大部分应用项目。不过，理解它们更能让你在需要的时候有帮助。

h3. Build 设置

让我们看一下Build的设置项。虽然，Grails要求开发你的应用时需要JDK 6，但可能发布时需要支持JDK 5容器。你只要在  @BuildConfig.groovy@ 中设置：

{code}
grails.project.source.level = "1.5"
grails.project.target.level = "1.5"
{code}

注意，源码和编译对象需要一致，所以 JDK 5 -> 1.5, JDK 6 -> 1.6, JDK 7 -> 1.7

此外，Grails支持的Servlet默认版本是2.5。如果你希望尝试更新的Servlet API特征(类似 3.0 异步支持)，你应该修改 @grails.servlet.version@  值。

{code}
grails.servlet.version = "3.0"
{code}

h3. 运行设置

在运行前， @Config.groovy@ 有一些核心设置被初始化：

* @grails.config.locations@  - Grails 设置文件和本地文件合并为新的主要配置。参阅 [section on externalised config|guide:configExternalized]
* @grails.enable.native2ascii@ - 如果你不需要为Grails i18n 国际化编码 native2ascii 转换，请设置 flase。（默认是true）
* @grails.views.default.codec@ - GSPs 默认转换编码，可以设置为 'none', 'html', 或 'base64' (默认: 'none'). 对于XSS攻击防护，请设置为 'html'.
* @grails.views.gsp.encoding@ - GSP 源码的默认编码 (默认: 'utf-8').
* @grails.mime.file.extensions@ - 可设置将文件的扩展名作为指定的 mime 格式。参阅 [Content Negotiation|guide:contentNegotiation] (默认: true).
* @grails.mime.types@ - 一组可支持的 mime 类型 [Content Negotiation|guide:contentNegotiation].
* @grails.serverURL@ - 指定的URL绝对的服务器指定地址链接 grails.serverURL="http://my.yourportal.com" 参阅 [createLink|Tags]. 常被用作与跳转
* @grails.views.gsp.sitemesh.preprocess@ - 确定是否发生Sitemesh预处理. Disabling this slows down page rendering, but if you need SiteMesh to parse the generated HTML from a GSP view then disabling it is the right option. 不用担心是否你理解这个值的作用，让它为 true。
* @grails.reload.excludes@ and @grails.reload.includes@ - 排除的重载目录和包含的重载目录。在运行 @run-app@ 命令后，此设置会影响是否重载或不重载这些文件。

h3. 生成 War

* @grails.project.war.file@ - 为 [war|commandLine] 命令指定一个war文件名
* @grails.war.dependencies@ - 可以通过一个Ant格式或一组jar文件的闭包，告知war中是否需要包含这些文件。
* @grails.war.copyToWebApp@ - 可以通过一个Ant格式的闭包，例如，“fileset()”。这里将可以让你对 war包中的"web-app" 目录的内容加以控制。
* @grails.war.resources@ - 可以通过一个Ant格式闭包，允许应用程序在建立最终的War文件时做的一些其他工作。

其他信息通过 [deployment|guide:deployment] 获得更多信息
