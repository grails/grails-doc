{hidden}
When using the Grails Maven plugin with the Maven build tool, Grails' dependency resolution mechanics are disabled as it is assumed that you will manage dependencies with Maven's @pom.xml@ file.

However, if you would like to continue using Grails regular commands like [run-app|commandLine], [test-app|commandLine] and so on then you can tell Grails' command line to load dependencies from the Maven @pom.xml@ file instead.

To do so simply add the following line to your @BuildConfig.groovy@:

{code}
grails.project.dependency.resolution = {
    pom true
    ..
}
{code}

The line @pom true@ tells Grails to parse Maven's @pom.xml@ and load dependencies from there.

{hidden}
当Grails Maven插件与Maven构建工具一起使用时，Grails的依赖解析机制会被禁用，因为这时假定你将使用Maven的@pom.xml@文件进行依赖管理。

但是，如果你想继续使用Grails中像[run-app|commandLine]、[test-app|commandLine]等等的常规命令，那么你可以告诉Grails命令行从Maven @pom.xml@文件中加载依赖。

要想这样做的话，简单地在你的@BuildConfig.groovy@文件里添加下面的一行代码：

{code}
grails.project.dependency.resolution = {
    pom true
    ..
}
{code}

@pom true@一行代码告诉Grails解析Maven的@pom.xml@文件并从其中加载依赖。


