{hidden}
You can declaratively specify plugins as dependencies via the dependency DSL instead of using the [install-plugin|commandLine] command:

{code}
grails.project.dependency.resolution = {
    ...
    repositories {
        ...
    }

    plugins {
        runtime ':hibernate:1.2.1'
    }

    dependencies {
        ...
    }
    ...
}
{code}

If you don't specify a group id the default plugin group id of @org.grails.plugins@ is used. 

h4. Latest Integration

{warning}
Only the Ivy dependency manager supports the "latest.integration" version. For Aether you can achieve a similar effect with version ranges.
{warning}

You can specify to use the latest version of a particular plugin by using "latest.integration" as the version number:

{code}
plugins {
    runtime ':hibernate:latest.integration'
}
{code}

h4. Integration vs. Release

The "latest.integration" version label will also include resolving snapshot versions. To not include snapshot versions then use the "latest.release" label:

{code}
plugins {
    runtime ':hibernate:latest.release'
}
{code}

{note}
The "latest.release" label only works with Maven compatible repositories. If you have a regular SVN-based Grails repository then you should use "latest.integration".
{note}

And of course if you use a Maven repository with an alternative group id you can specify a group id:

{code}
plugins {
    runtime 'mycompany:hibernate:latest.integration'
}
{code}

h4. Plugin Exclusions

You can control how plugins transitively resolves both plugin and JAR dependencies using exclusions. For example:

{code}
plugins {
    runtime(':weceem:0.8') {
        excludes "searchable"
    }
}
{code}

Here we have defined a dependency on the "weceem" plugin which transitively depends on the "searchable" plugin. By using the @excludes@ method you can tell Grails _not_ to transitively install the searchable plugin. You can combine this technique to specify an alternative version of a plugin:

{code}
plugins {
    runtime(':weceem:0.8') {
        excludes "searchable" // excludes most recent version
    }
    runtime ':searchable:0.5.4' // specifies a fixed searchable version
}
{code}

You can also completely disable transitive plugin installs, in which case no transitive dependencies will be resolved:

{code}
plugins {
    runtime(':weceem:0.8') {
        transitive = false
    }
    runtime ':searchable:0.5.4' // specifies a fixed searchable version
}
{code}

{hidden}
你可以借助于依赖DSL声明式地指定插件作为依赖，而不是使用[install-plugin|commandLine]命令：

{code}
grails.project.dependency.resolution = {
    ...
    repositories {
        ...
    }

    plugins {
        runtime ':hibernate:1.2.1'
    }

    dependencies {
        ...
    }
    ...
}
{code}

如果你没有指定组织id，会使用默认的@org.grails.plugins@组织id。

h4. 最新的继承

{warning}
只有Ivy依赖管理程序支持"latest.integration"版本号。对Aether来说，你可以使用版本号范围取得类似的效果。
{warning}

通过使用"latest.integration"作为版本号，你可以指定使用一个特定插件的最新版本：

{code}
plugins {
    runtime ':hibernate:latest.integration'
}
{code}

h4. 集成版与发行版

"latest.integration"版本标签也包含对快照版本的解析。不包括快照版本可以使用"latest.release"标签：

{code}
plugins {
    runtime ':hibernate:latest.release'
}
{code}

{note}
"latest.release"标签只对Maven兼容的仓库起作用。如果你有常规的基于SVN的Grails仓库，那么你应该使用"latest.integration"。
{note}

很显然如果你使用的Maven仓库有一个别的组织id，那么你可以指定一个组织id：

{code}
plugins {
    runtime 'mycompany:hibernate:latest.integration'
}
{code}

h4. 插件排除

你可以使用依赖排除控制插件如何对插件依赖和JAR依赖的传递性的解析。例如：

{code}
plugins {
    runtime(':weceem:0.8') {
        excludes "searchable"
    }
}
{code}

这里我们定义了对'weceem'插件的依赖，其传递性地依赖于"searchable"插件。通过使用@excludes@方法，你可以告诉Grails _不要_ 传递性地安装searchable插件。你可以结合这个技术来指定一个插件的替代版本：

{code}
plugins {
    runtime(':weceem:0.8') {
        excludes "searchable" // 排除最新的插件
    }
    runtime ':searchable:0.5.4' // 指定一个固定的searchable插件版本
}
{code}

你也可以完全禁用传递性的插件安装，在这种情况下没有传递性的依赖会被解析：

{code}
plugins {
    runtime(':weceem:0.8') {
        transitive = false
    }
    runtime ':searchable:0.5.4' // 指定一个固定的searchable插件版本
}
{code}
