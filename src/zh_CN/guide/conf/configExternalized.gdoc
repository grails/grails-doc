有些发布的产品可以修改配置文件来改变请求行为，而不需要重新重建应用。为了达到这个功能，配置文件可以扩展化。下面的方式可以指定 Grails 改变配置 @grails.config.locations@ 的 @Config.groovy@ :

{code:java}
grails.config.locations = [
    "classpath:${appName}-config.properties",
    "classpath:${appName}-config.groovy",
    "file:${userHome}/.grails/${appName}-config.properties",
    "file:${userHome}/.grails/${appName}-config.groovy" ]
{code}

上面的例子，我们可以调用不同的 classpath 和 本地 @USER_HOME@ 目录中的配置文件(包括 Java 属性文件和 "ConfigSlurper":http://groovy.codehaus.org/ConfigSlurper 设置)

这样就可以按照配置脚本进行调用参数

{code:java}
grails.config.locations = [com.my.app.MyConfig]
{code}

此种情况特别适合于你从插件或者应用的其他部分来加载配置，其典型的应用就是一个插件所提供的配置可以在多个应用中复用。

最后，所有的这些配置文件的内容将合并于 [GrailsApplication|api:org.codehaus.groovy.grails.commons.GrailsApplication] 的config属性中，因此，要获取使用也是通过它来实现的。

配置中如果一个名字有多个值，那么新值将覆盖旧的，其顺序是根据源文件的加载顺序来定义的。

h4. 默认设置

通过grails.config.locations定义的配置将 优先于 你在Config.groovy文件中的任意值，这也许并非你所需要的。你希望Config.groovy或者特定位置的文件才能加载并且重载特定的 缺省值 ，这种情况，你可以通过配置grails.config.defaults.locations属性来实现。

此属性的值跟grails.config.locations一样（可以是特定路径下的配置脚本、属性文件或者类名），但与之不同的是通过grails.config.defaults.locations来配置的值比其他方式加载的 更早 ，因此也就可有被重载。有些插件就是通过此机制来实现一个或者多个缺省配置的。

{note}
Grails 支持覆盖参数 "Spring":http://www.springframework.org 参阅 [Grails and Spring|guide:spring]
{note}
