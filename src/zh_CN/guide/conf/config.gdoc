{hidden}
For general configuration Grails provides a file called @grails-app/conf/Config.groovy@. This file uses Groovy's "ConfigSlurper":http://groovy.codehaus.org/ConfigSlurper which is very similar to Java properties files except it is pure Groovy hence you can reuse variables and use proper Java types!

You can add your own configuration in here, for example:

{code}
foo.bar.hello = "world"
{code}

Then later in your application you can access these settings in one of two ways. The most common is from the [GrailsApplication|api:org.codehaus.groovy.grails.commons.GrailsApplication] object, which is available as a variable in controllers and tag libraries:

{code}
assert "world" == grailsApplication.config.foo.bar.hello
{code}

The other way involves getting a reference to the [ConfigurationHolder|api:org.codehaus.groovy.grails.commons.ConfigurationHolder] class that holds a reference to the configuration object:

{code}
import org.codehaus.groovy.grails.commons.*
...
def config = ConfigurationHolder.config
assert "world" == config.foo.bar.hello
{code}

{warning}
ConfigurationHolder and ApplicationHolder are deprecated and will be removed in a future version of Grails, so it is highly preferable to access the @GrailsApplication@ and config from the @grailsApplication@ variable.
{warning}

{hidden}
Grails提供了一个名为 @grails-app/conf/Config.groovy@的配置文件用于通用的配置。其使用Groovy的"ConfigSlurper":http://groovy.codehaus.org/ConfigSlurper ，这非常类似于Java属性文件，不过它是只使用了Groovy，这样就可以重用变量和合适的Java类型！

你可以添加自己的配置信息，例如：

{code}
foo.bar.hello = "world"
{code}

以后在你的应用程序中，你可以使用以下两种方法中的一种来访问这些配置。最常用的就是 [GrailsApplication|api:org.codehaus.groovy.grails.commons.GrailsApplication] 对象，此对象仅在控制器和标签库中可用。比如：

{code}
assert "world" == grailsApplication.config.foo.bar.hello
{code}

另外一种方法是获取 [ConfigurationHolder|api:org.codehaus.groovy.grails.commons.ConfigurationHolder] 的一个引用，这个类型持有配置对象的一个引用：

{code}
import org.codehaus.groovy.grails.commons.*
...
def config = ConfigurationHolder.config
assert "world" == config.foo.bar.hello
{code}

{warning}
ConfigurationHolder和ApplicationHolder现在已经被废弃，并且将在Grails的未来版本中移除，因此强烈推荐从@grailsApplication@变量访问@GrailsApplication@类和配置。
{warning}
