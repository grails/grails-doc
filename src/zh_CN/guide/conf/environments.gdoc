h4. 不同环境（Per Environment）配置

Grails支持不同环境配置的概念。grails-app/conf目录下的@Config.groovy@, @DataSource.groovy@, 和 @BootStrap.groovy@文件都支持 [ConfigSlurper|http://groovy.codehaus.org/ConfigSlurper] 语法的不同环境配置。Grails自带的缺省DataSource定义，就是一个很好的示例：

{code:java}
dataSource {
    pooled = false
    driverClassName = "org.h2.Driver"
    username = "sa"
    password = ""
}
environments {
    development {
        dataSource {
            dbCreate = "create-drop"
            url = "jdbc:h2:mem:devDb"
        }
    }
    test {
        dataSource {
            dbCreate = "update"
            url = "jdbc:h2:mem:testDb"
        }
    }
    production {
        dataSource {
            dbCreate = "update"
            url = "jdbc:h2:prodDb"
        }
    }
}
{code}

请留意上述示例中顶层部分公共配置，以及不同环境下environments代码块中DataSource的dbCreate和url属性。

h4. 不同环境下的运行和打包

Grails的命令行 [command line|guide:commandLine]  中内置了特定环境下执行命令的能力，其格式为：

{code:java}
grails [environment] [command name]
{code}

此外，Grails预置了三种开发环境：dev、prod和test，分别代表了开发、生产和测试环境 @dev@, @prod@, and @test@ for @development@, @production@ and @test@ 。比如，要创建test环境的WAR，可以运行如下命令：

{code:java}
grails test war
{code}

要设置其他的环境，请使用grails.env变量：

{code:java}
grails -Dgrails.env=UAT run-app
{code}

h4. 可编程的环境检测

在你的代码中，比如Gant脚本或者启动类，你通过 [Environment|api:grails.util.Environment] 类可以检测到当前的环境，比如：

{code:java}
import grails.util.Environment

...

switch (Environment.current) {
    case Environment.DEVELOPMENT:
        configureForDevelopment()
        break
    case Environment.PRODUCTION:
        configureForProduction()
        break
}
{code}

h4. 不同环境下的启动

通常你的应用启动时，需要根据不同的环境运行相应的代码，为此你可以使用 @grails-app/conf/BootStrap.groovy@ 文件来执行不同环境下的处理：

{code}
def init = { ServletContext ctx ->
    environments {
        production {
            ctx.setAttribute("env", "prod")
        }
        development {
            ctx.setAttribute("env", "dev")
        }
    }
    ctx.setAttribute("foo", "bar")
}
{code}

h4. 不同环境下的通用处理

在以前的 @BootStrap@  示例中，我们使用 @grails.util.Environment@ 类做了内部处理。你也可以通过此类来执行特定环境中的逻辑，比如：

{code}
Environment.executeForCurrentEnvironment {
    production {
        // do something in production
    }
    development {
        // do something only in development
    }
}
{code}
