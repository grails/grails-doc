plugins {
    id 'base'
    id 'org.asciidoctor.jvm.convert' version '4.0.0-alpha.1'
    id 'org.grails.grails-gdoc-to-asciidoc'
}

import org.apache.tools.ant.taskdefs.condition.Os

version = project.findProperty("grails.version")
archivesBaseName = "grails-docs"

ext.checkOutDir = project.layout.buildDirectory.dir('checkout').get().asFile.absolutePath
ext.outputDir = layout.buildDirectory.file("docs").get().asFile.absolutePath
ext.githubSlug = "grails/grails-doc"
ext.githubBranch = project.findProperty("githubBranch") ?: "7.0.x"
ext.guidePage = "/docs/guide/single.html"
ext.indexPage = "/docs/index.html"

ext.explicitGrailsHome = System.getProperty("grails.home") ?: project.findProperty('grails.home')
ext.grailsHome = explicitGrailsHome ? file(explicitGrailsHome).absolutePath : "${checkOutDir}/grails-src"
ext.projectVersion = project.version

configurations {
    publish
}

gdoc2asciidoc {
    apiLinks = ['org.hibernate'             : 'https://docs.jboss.org/hibernate/orm/current/javadocs/',
                'org.springframework.boot'  : 'https://docs.spring.io/spring-boot/docs/2.5.2/api',
                'org.springframework'       : 'https://docs.spring.io/spring/docs/5.3.8/javadoc-api/',
                'javax.servlet'             : 'https://docs.oracle.com/javaee/1.4/api/',
                'java.'                     : 'https://docs.oracle.com/javase/6/docs/api/',
                'groovy.'                   : 'https://docs.groovy-lang.org/docs/latest/html/api/',
                'org.codehaus.groovy.grails': "https://docs.grails.org/$githubBranch/api",
                'grails.orm.'               : 'https://gorm.grails.org/latest/api',
                'grails.gorm.'              : 'https://gorm.grails.org/latest/api',
                'grails.'                   : "https://docs.grails.org/$githubBranch/api",
                'org.grails.'               : "https://docs.grails.org/$githubBranch/api"
    ]
    resourcesDir = file("resources")
    srcDir = file("src/en")
}

task buildscriptDependencies(type: DependencyReportTask) {
    configurations = [buildscript.configurations.classpath]
}

// use jsoup in PdfBuilder for cleaning input html
System.setProperty('grails.docs.clean.html', 'true')
// creates single.html.before.xml and single.html.after.xml files for debugging pdf input when enabled
//System.setProperty('grails.docs.debug.pdf','true')

asciidoctor {
    resources {
        from('resources')
    }

    options template_dirs: ["${projectDir}/src/docs/templates"]
    attributes 'experimental': 'true',
            'compat-mode': 'true',
            'icons': 'font',
            'linkcss': 'true',
            'docinfo1': '',
            'toc': 'left',
            'version': project.version,
            'sourcedir': grailsHome
}


asciidoctor.dependsOn("apiDocs")

tasks.withType(org.gradle.api.tasks.javadoc.Groovydoc) {
    configure {
        access = GroovydocAccess.PRIVATE
        processScripts = false
        includeMainForScripts = false
    }
}

task migrate(type: grails.doc.gradle.MigrateLegacyDocs)

tasks.register("dist", Zip) {
    dependsOn "docs"
    from outputDir
}

tasks.register("createReleaseDropdown", grails.doc.AddReleaseDropDown) {
    dependsOn "publishGuide", "publishPdf"
    inputFiles = [file("${buildDir.absolutePath}/manual/guide/single.html"), file("${buildDir.absolutePath}/manual/index.html")]

    inputs.files(inputFiles)
    outputs.dir(outputDir)
}

tasks.register('fetchGrailsSource', grails.doc.FetchGrailsSourceTask) {
    onlyIf { !explicitGrailsHome }
}

tasks.register("editProjectArtificat", Exec) {
    onlyIf { project.hasProperty("editGrailsVersion") }
    dependsOn 'fetchGrailsSource'

    executable Os.isFamily(Os.FAMILY_WINDOWS) ? "cmd" : "bash"
    args Os.isFamily(Os.FAMILY_WINDOWS) ? "/c" : "-c", "sed -i 's/^projectVersion.*\$/projectVersion=$version/' ${grailsHome}/gradle.properties"
}

tasks.register("apiDocs", Exec) {
    onlyIf { !System.getProperty("disable.groovydocs") }
    dependsOn 'fetchGrailsSource'

    inputs.files(fileTree(grailsHome) {
        exclude '**/*.lock'
        exclude '**/.gradle'
    })
    outputs.dir(grailsHome + "/doc")

    String command = Os.isFamily(Os.FAMILY_WINDOWS) ? "gradlew.bat" : "./gradlew"
    commandLine = [command, "groovydoc", "--quiet", "--no-daemon", "--console=plain", "--project-dir=${grailsHome}"]
    workingDir = grailsHome
    environment "GRADLE_OPTS", "-Xmx2048m -Xms256m -XX:+CMSClassUnloadingEnabled -XX:+HeapDumpOnOutOfMemoryError"
}

tasks.register('downloadPom', grails.doc.DownloadPomTask) {
    version = projectVersion
}

tasks.register('extractPomVersions', grails.doc.ExtractPomVersionsTask) {
    dependsOn 'downloadPom'
    pomFile = downloadPom.outputs.files.singleFile
}

tasks.register('publishGuide', grails.doc.gradle.PublishGuide) {
    dependsOn(['apiDocs', 'extractPomVersions'])
    targetDir = project.layout.buildDirectory.dir("manual").get().asFile

    doFirst {
        def searchDirs = project.file(project.grailsHome).listFiles().findAll {
            new File(it, "src/main/groovy/org/grails").exists()
        }.collect {
            new File(it, "src/main/groovy/org/grails")
        }

        // No language setting because we want the English guide to be
        // generated with a 'en' in the path, but the source is in 'en'
        // so that it's easy to track with git.
        sourceRepo = "https://github.com/grails/grails-doc/edit/$githubBranch/src/en"
        sourceDir = new File(projectDir, "src/en")
        propertiesFiles = [new File(projectDir, "gradle.properties")]
        asciidoc = true
        properties = [
                'javaee'             : "https://docs.oracle.com/javaee/7/api/",
                'javase'             : "https://docs.oracle.com/en/java/javase/17/docs/api/",
                'groovyapi'          : "https://docs.groovy-lang.org/${groovyVersion}/html/gapi/",
                'springapi'          : "https://docs.spring.io/spring/docs/${springVersion}/javadoc-api/",
                'springdocs'         : "https://docs.spring.io/spring/docs/${springVersion}/",
                'asyncdocs'          : "https://async.grails.org/latest",
                'asyncApiDocs'       : "https://async.grails.org/latest/api/",
                'gspdocs'            : "https://gsp.grails.org/${gspVersion}",
                'gspApiDocs'         : "https://gsp.grails.org/${gspVersion}/api/",
                'gormApiDocs'        : "https://gorm.grails.org/${gormVersion}/api/",
                'hibernateReference' : 'https://docs.jboss.org/hibernate/orm/5.6/userguide/html_single/Hibernate_User_Guide.html',
                'springbootapi'      : "https://docs.spring.io/spring-boot/docs/${springBootVersion}/api",
                'springBootReference': "https://docs.spring.io/spring-boot/docs/${springBootVersion}/reference",
                'springBootVersion'  : project.springBootVersion,
                'springVersion'      : project.springVersion,
                'gradleVersion'      : project.gradleVersion
        ]
        // Parse the string content into Properties object
        def props = new Properties()
        props.load(new StringReader(file(tasks.extractPomVersions.outputs.files.singleFile).text))
        properties += props
        macros = [new grails.doc.macros.GspTagSourceMacro(searchDirs)]
    }
}

tasks.register('publishPdf', grails.doc.gradle.PublishPdf) {
    dependsOn 'publishGuide'
    outputDirectory = new File(project.buildDir, "/manual")
}

tasks.register("docs", Copy) {
    dependsOn "apiDocs", "publishGuide", "createReleaseDropdown", "publishPdf"

    def manualDocsDir = publishGuide.targetDir
    def apiDocsDir = file(grailsHome + '/build/docs') // This is the output directory of the groovydoc task in the grails project.
    def modifiedPagesDir = createReleaseDropdown.outputDir
    def mergedDocsDir = project.layout.buildDirectory.dir('docs')

    inputs.dir manualDocsDir
    inputs.dir apiDocsDir
    inputs.dir modifiedPagesDir
    inputs.dir project.layout.projectDirectory.dir("src")

    outputs.dir mergedDocsDir

    from manualDocsDir, apiDocsDir, modifiedPagesDir
    into mergedDocsDir

    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}


artifacts {
    archives dist
}
