plugins {
    id 'base'
    id 'org.asciidoctor.jvm.convert' version '4.0.0-alpha.1'
    id 'org.grails.grails-gdoc-to-asciidoc'
}

import org.apache.tools.ant.taskdefs.condition.Os

version = project.getProperty("grails.version")
archivesBaseName = "grails-docs"

ext.checkOutDir = "${buildDir.path}/checkout"
ext.outputDir = "${buildDir.path}/docs"
ext.githubSlug="grails/grails-doc"
ext.githubBranch = project.hasProperty("githubBranch") ? project.getProperty("githubBranch") : "master"
ext.guidePage = "/docs/guide/single.html"
ext.indexPage = "/docs/index.html"

ext.explicitGrailsHome = System.getProperty("grails.home") ?: (project.hasProperty('grails.home') ? project.getProperty("grails.home") : null)
ext.grailsHome = explicitGrailsHome ? file(explicitGrailsHome).absolutePath : "$checkOutDir/grails-src"
ext.projectVersion = project.version

configurations {
    publish
}

gdoc2asciidoc {
    apiLinks = ['org.hibernate':'https://docs.jboss.org/hibernate/orm/current/javadocs/',
                'org.springframework.boot':'https://docs.spring.io/spring-boot/docs/2.5.2/api',
                'org.springframework':'https://docs.spring.io/spring/docs/5.3.8/javadoc-api/',
                'javax.servlet':'https://docs.oracle.com/javaee/1.4/api/',
                'java.':'https://docs.oracle.com/javase/6/docs/api/',
                'groovy.':'https://docs.groovy-lang.org/docs/latest/html/api/',
                'org.codehaus.groovy.grails':"https://docs.grails.org/$githubBranch/api",
                'grails.orm.':'https://gorm.grails.org/latest/api',
                'grails.gorm.':'https://gorm.grails.org/latest/api',
                'grails.':"https://docs.grails.org/$githubBranch/api",
                'org.grails.':"https://docs.grails.org/$githubBranch/api"
    ]
    resourcesDir = file("resources")
    srcDir = file("src/en")
}

task buildscriptDependencies(type: DependencyReportTask) {
    configurations = [buildscript.configurations.classpath]
}

// use jsoup in PdfBuilder for cleaning input html
System.setProperty('grails.docs.clean.html','true')
// creates single.html.before.xml and single.html.after.xml files for debugging pdf input when enabled
//System.setProperty('grails.docs.debug.pdf','true')

task fetchGrailsSource {
    onlyIf {
        println "GRAILS HOME=$explicitGrailsHome"
        return !explicitGrailsHome
    }
    doLast {
        ant.mkdir dir: checkOutDir

        println "Downloading Grails source code. If you already have a copy " +
                "of the Grails source code checked out you can avoid this download " +
                "by setting the grails.home system property to point to your local " +
                "copy of the source. See README.md for more information."


        def zipFile = "${checkOutDir}/grails-src.zip"

        def grailsVersion = System.getenv('TARGET_GRAILS_VERSION')
        if (grailsVersion) {
            ant.get src: "https://github.com/grails/grails-core/archive/refs/tags/v${grailsVersion}.zip", dest: zipFile, verbose: true
        } else {
            ant.get src: "https://github.com/grails/grails-core/zipball/${githubBranch}", dest: zipFile, verbose: true
        }

        ant.unzip src: zipFile, dest: checkOutDir, {
             mapper type: "regexp", from: "(grails-core-\\S*?/)(.*)", to: "grails-src/\\2"
        }

        ant.chmod(file:"${checkOutDir}/grails-src/gradlew", perm:700)

        println "Grails source code has been downloaded to ${relativePath(grailsHome)}"
    }
}

task editProjectArtificat (type:Exec) {
    onlyIf { project.hasProperty("editGrailsVersion") }
    dependsOn 'fetchGrailsSource'
    executable "bash"
    if (explicitGrailsHome) {
        args  "-i", 'sed -i "s/^projectVersion.*$/projectVersion=6.0.0/" ' + explicitGrailsHome + '/gradle.properties'
    } else {
        args  "-i", 'sed -i "s/^projectVersion.*$/projectVersion=6.0.0/" ' +  checkOutDir + "/grails-src/gradle.properties"
    }
}

task apiDocs(type: Exec) {
    dependsOn 'fetchGrailsSource'
    String command = "./gradlew"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        command = "gradlew.bat"
    }

    commandLine = [command, "groovydoc", '--info', '--stacktrace']
    workingDir = grailsHome
    environment "GRADLE_OPTS", "-Xmx2048m -Xms256m -XX:MaxPermSize=512m -XX:+CMSClassUnloadingEnabled -XX:+HeapDumpOnOutOfMemoryError"
}

asciidoctor {
    resources {
        from('resources')
    }

    options template_dirs: ["${projectDir}/src/docs/templates"]

    attributes 'experimental'  : 'true',
               'compat-mode'   : 'true',
               'icons'         : 'font',
               'linkcss'       : 'true',
               'docinfo1'      : '',
               'toc'           : 'left',
               'version'       : project.version,
               'gormVersion'   : project.gormVersion,
               'sourcedir'     : "$checkOutDir/grails-src"
}


asciidoctor.dependsOn(apiDocs)

apiDocs.onlyIf { !System.getProperty("disable.groovydocs") }

task copyApiDocs(type: Copy) {
    from "${project.grailsHome}/doc/api"
    into "${outputDir}/api"
}

task migrate(type: grails.doc.gradle.MigrateLegacyDocs)

task publishGuide(type: grails.doc.gradle.PublishGuide, dependsOn: ['apiDocs', 'copyApiDocs']) {
    def searchDirs = project.file(project.grailsHome).listFiles().findAll {
        new File(it, "src/main/groovy/org/grails").exists()
    }.collect {
        new File(it, "src/main/groovy/org/grails")
    }

    // No language setting because we want the English guide to be
    // generated with a 'en' in the path, but the source is in 'en'
    // so that it's easy to track with git.
    sourceRepo = "https://github.com/grails/grails-doc/edit/$githubBranch/src/en"
    sourceDir = new File(projectDir, "src/en")
    propertiesFiles = [ new File(projectDir, "gradle.properties") ]
    asciidoc = true
    properties = [
        'javaee': "https://docs.oracle.com/javaee/7/api/",
        'javase': "https://docs.oracle.com/en/java/javase/11/docs/api/",
        'groovyapi': "https://docs.groovy-lang.org/${groovyVersion}/html/gapi/",
        'springapi': "https://docs.spring.io/spring/docs/${springVersion}/javadoc-api/",
        'springdocs': "https://docs.spring.io/spring/docs/${springVersion}/",
        'asyncdocs': "https://async.grails.org/latest",
        'asyncApiDocs': "https://async.grails.org/latest/api/",
        'gspdocs': "https://gsp.grails.org/${gspVersion}",
        'gspApiDocs': "https://gsp.grails.org/${gspVersion}/api/",
        'gormApiDocs': "https://gorm.grails.org/${gormVersion}/api/",
        'springbootapi' :"https://docs.spring.io/spring-boot/docs/${springBootVersion}/api",
        'springBootReference' :"https://docs.spring.io/spring-boot/docs/${springBootVersion}/reference",
        'springBootVersion': project.springBootVersion,
        'springVersion': project.springVersion,
        'gradleVersion': project.gradleVersion
    ]
    macros = [ new grails.doc.macros.GspTagSourceMacro(searchDirs) ]
}

task publishPdf(type: grails.doc.gradle.PublishPdf, dependsOn: ['publishGuide'])

task docs(dependsOn: ['publishPdf']) {
    finalizedBy 'createReleasesDropdown'
}

task dist(type: Zip, dependsOn: 'docs') {
    from outputDir
}

task createReleasesDropdown(type: grails.doc.dropdown.CreateReleasesDropdownTask) {
    slug = githubSlug as String
    version = projectVersion
    guide = file("${buildDir.absolutePath}/docs/guide/single.html")
    index = file("${buildDir.absolutePath}/docs/index.html")
    mustRunAfter "dist"
    onlyIf {
        new File("${buildDir.absolutePath}/docs/guide/single.html").exists() &&
        new File("${buildDir.absolutePath}/docs/index.html").exists()
    }
}

tasks.withType(org.gradle.api.tasks.javadoc.Groovydoc) {
    configure {
        access = GroovydocAccess.PRIVATE
        processScripts = false
        includeMainForScripts = false
    }
}

artifacts {
    archives dist
}
